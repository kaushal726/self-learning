{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Knowledge Bank \u00b6 Your Gateway to Technical Mastery \u00b6 Welcome to the Knowledge Bank, your comprehensive resource for technical expertise and cutting-edge information. Whether you're a seasoned developer or just starting out, our curated content will help you stay ahead in the ever-evolving tech landscape. Featured Topics \u00b6 1. Software Development \u00b6 Programming Languages: Python, JavaScript, Java, C++, and more. Frameworks & Libraries: React, Angular, Vue.js, Django, Flask. Best Practices: Coding standards, version control, debugging techniques. 2. Web Technologies \u00b6 Frontend Development: HTML, CSS, JavaScript, responsive design. Backend Development: Node.js, Express, RESTful APIs, GraphQL. Web Performance: Optimization, caching, content delivery networks. 3. DevOps & Automation \u00b6 Continuous Integration/Continuous Deployment (CI/CD): GitHub Actions, Jenkins, Travis CI. Containerization & Orchestration: Docker, Kubernetes. Infrastructure as Code (IaC): Terraform, Ansible. 4. Data Management \u00b6 Databases: SQL, NoSQL, MongoDB, PostgreSQL. Big Data Technologies: Hadoop, Spark, Kafka. Data Visualization: Tableau, Power BI, D3.js. 5. Cloud Computing \u00b6 Cloud Providers: AWS, Azure, Google Cloud Platform. Cloud Services: Computing, storage, databases, serverless computing. Cloud Security: Identity and access management, encryption. 6. Emerging Technologies \u00b6 Artificial Intelligence (AI): Machine learning, deep learning, natural language processing. Blockchain: Cryptocurrencies, smart contracts, decentralized applications. Internet of Things (IoT): Smart devices, edge computing, IoT protocols. 7. Tools & Techniques \u00b6 Version Control: Git, GitHub, GitLab. Project Management: Agile, Scrum, Kanban. Development Environments: IDEs, code editors, command-line tools. Popular Resources \u00b6 Tutorials: Step-by-step guides and hands-on exercises. Documentation: Official documentation and API references. Case Studies: Real-world applications and success stories. Get Involved \u00b6 Contribute: Share your knowledge and write for the Knowledge Bank. Feedback: Help us improve by providing feedback on our content. Explore, learn, and master the latest in technology with the Knowledge Bank!","title":"Home"},{"location":"#welcome-to-knowledge-bank","text":"","title":"Welcome to Knowledge Bank"},{"location":"#your-gateway-to-technical-mastery","text":"Welcome to the Knowledge Bank, your comprehensive resource for technical expertise and cutting-edge information. Whether you're a seasoned developer or just starting out, our curated content will help you stay ahead in the ever-evolving tech landscape.","title":"Your Gateway to Technical Mastery"},{"location":"#featured-topics","text":"","title":"Featured Topics"},{"location":"#1-software-development","text":"Programming Languages: Python, JavaScript, Java, C++, and more. Frameworks & Libraries: React, Angular, Vue.js, Django, Flask. Best Practices: Coding standards, version control, debugging techniques.","title":"1. Software Development"},{"location":"#2-web-technologies","text":"Frontend Development: HTML, CSS, JavaScript, responsive design. Backend Development: Node.js, Express, RESTful APIs, GraphQL. Web Performance: Optimization, caching, content delivery networks.","title":"2. Web Technologies"},{"location":"#3-devops-automation","text":"Continuous Integration/Continuous Deployment (CI/CD): GitHub Actions, Jenkins, Travis CI. Containerization & Orchestration: Docker, Kubernetes. Infrastructure as Code (IaC): Terraform, Ansible.","title":"3. DevOps &amp; Automation"},{"location":"#4-data-management","text":"Databases: SQL, NoSQL, MongoDB, PostgreSQL. Big Data Technologies: Hadoop, Spark, Kafka. Data Visualization: Tableau, Power BI, D3.js.","title":"4. Data Management"},{"location":"#5-cloud-computing","text":"Cloud Providers: AWS, Azure, Google Cloud Platform. Cloud Services: Computing, storage, databases, serverless computing. Cloud Security: Identity and access management, encryption.","title":"5. Cloud Computing"},{"location":"#6-emerging-technologies","text":"Artificial Intelligence (AI): Machine learning, deep learning, natural language processing. Blockchain: Cryptocurrencies, smart contracts, decentralized applications. Internet of Things (IoT): Smart devices, edge computing, IoT protocols.","title":"6. Emerging Technologies"},{"location":"#7-tools-techniques","text":"Version Control: Git, GitHub, GitLab. Project Management: Agile, Scrum, Kanban. Development Environments: IDEs, code editors, command-line tools.","title":"7. Tools &amp; Techniques"},{"location":"#popular-resources","text":"Tutorials: Step-by-step guides and hands-on exercises. Documentation: Official documentation and API references. Case Studies: Real-world applications and success stories.","title":"Popular Resources"},{"location":"#get-involved","text":"Contribute: Share your knowledge and write for the Knowledge Bank. Feedback: Help us improve by providing feedback on our content. Explore, learn, and master the latest in technology with the Knowledge Bank!","title":"Get Involved"},{"location":"docs/","text":"Documentation Overview \u00b6 Welcome to the documentation portal. Here you'll find comprehensive guides and resources on a variety of technologies and topics. Table of Contents \u00b6 GitHub Documentation Excel","title":"Docs"},{"location":"docs/#documentation-overview","text":"Welcome to the documentation portal. Here you'll find comprehensive guides and resources on a variety of technologies and topics.","title":"Documentation Overview"},{"location":"docs/#table-of-contents","text":"GitHub Documentation Excel","title":"Table of Contents"},{"location":"project-idea/","text":"Ideas \u00b6 Create a System to Manage Financial Issues Examples: Income and Expenditure Tracking. Daily Expenses Single-person Expense Tracking Household Expense Management Monthly Budget Planner Trip Financial Handler Budget Planning for Trips Expense Splitting Between Group Members Trip Summary and Report Generation Savings and Investment Tracker Goal-based Saving Plans Investment Portfolio Management Alerts for Investment Opportunities and Risks Bill Payment Reminder System Automated Reminders for Upcoming Bills Integration with Payment Gateways Financial Reports Generation Yearly/Monthly Financial Summaries Visual Reports with Graphs and Charts Debt Management Tool Loan Repayment Schedules Interest Rate Tracking Financial Goal Setting Short-term and Long-term Goal Tracking based on %","title":"Project Ideas"},{"location":"project-idea/#ideas","text":"Create a System to Manage Financial Issues Examples: Income and Expenditure Tracking. Daily Expenses Single-person Expense Tracking Household Expense Management Monthly Budget Planner Trip Financial Handler Budget Planning for Trips Expense Splitting Between Group Members Trip Summary and Report Generation Savings and Investment Tracker Goal-based Saving Plans Investment Portfolio Management Alerts for Investment Opportunities and Risks Bill Payment Reminder System Automated Reminders for Upcoming Bills Integration with Payment Gateways Financial Reports Generation Yearly/Monthly Financial Summaries Visual Reports with Graphs and Charts Debt Management Tool Loan Repayment Schedules Interest Rate Tracking Financial Goal Setting Short-term and Long-term Goal Tracking based on %","title":"Ideas"},{"location":"blog/","text":"Blog \u00b6 Idea","title":"Blog"},{"location":"blog/#blog","text":"Idea","title":"Blog"},{"location":"tech/excel/","text":"Excel & Google Sheets Formula Reference Guide \u00b6 Table of Contents \u00b6 Basic Arithmetic and Rounding DIVIDE Function ROUND Function SUM and Average Calculation SUM Function Combining SUM and DIVIDE with ROUND Working with Multiple Sheets Referencing Data from Another Sheet Dynamic Sheet References Linking Data Between Google Sheets IMPORTRANGE Function Using IMPORTRANGE with Dynamic Cell References Basic Arithmetic and Rounding \u00b6 DIVIDE Function \u00b6 The DIVIDE function is used to divide one number by another. Syntax: =DIVIDE(numerator, denominator) Example: =DIVIDE(C9, 12) This divides the value in cell C9 by 12 . ROUND Function \u00b6 The ROUND function is used to round a number to a specified number of digits. Syntax: =ROUND(number, num_digits) Example: =ROUND(DIVIDE(C9, 12), 0) This divides the value in C9 by 12 and rounds the result to the nearest whole number. SUM and Average Calculation \u00b6 SUM Function \u00b6 The SUM function is used to add up a range of numbers. Syntax: =SUM(range) Example: =SUM(C19:C28) This adds up all the values from cell C19 to C28 . Combining SUM and DIVIDE with ROUND \u00b6 You can combine SUM , DIVIDE , and ROUND to calculate an average and round it. Syntax: =ROUND(SUM(range)/divisor, num_digits) Example: =ROUND(SUM(C19:C28)/12, 0) This sums the values from C19 to C28 , divides by 12 , and rounds the result to the nearest whole number. Working with Multiple Sheets \u00b6 Referencing Data from Another Sheet \u00b6 To reference a cell from another sheet in the same workbook, use the sheet name followed by an exclamation mark. Syntax: =SheetName!Cell Example: =January!A38 This references cell A38 from the sheet named January . Dynamic Sheet References \u00b6 If you want the sheet name to be dynamic (e.g., coming from another cell), you can use the INDIRECT function. Syntax: =INDIRECT(\"'\" & CellContainingSheetName & \"'!CellReference\") Example: =INDIRECT(\"'\" & B4 & \"'!A38\") This formula uses the sheet name in cell B4 and references A38 in that sheet. Linking Data Between Google Sheets \u00b6 IMPORTRANGE Function \u00b6 The IMPORTRANGE function is used to import data from one Google Sheet to another. Syntax: =IMPORTRANGE(\"spreadsheet_url\", \"range_string\") Example: =IMPORTRANGE(\"1pCZ9dTPq0YfoT5oslhC0U_qsPLVF1Kc7ZiPC0TKkmlk\", \"2024!O19\") This imports the value from cell O19 in the 2024 sheet from another Google Sheet with the specified URL. Using IMPORTRANGE with Dynamic Cell References \u00b6 To make the sheet name or range dynamic, use the IMPORTRANGE function with the INDIRECT function. Syntax: =IMPORTRANGE(\"spreadsheet_url\", INDIRECT(\"range_string\")) Example: =IMPORTRANGE(\"1pCZ9dTPq0YfoT5oslhC0U_qsPLVF1Kc7ZiPC0TKkmlk\", INDIRECT(\"'\" & B4 & \"'!O19\")) This dynamically references the sheet and cell specified in B4 .","title":"Excel Formulas Documentation"},{"location":"tech/excel/#excel-google-sheets-formula-reference-guide","text":"","title":"Excel &amp; Google Sheets Formula Reference Guide"},{"location":"tech/excel/#table-of-contents","text":"Basic Arithmetic and Rounding DIVIDE Function ROUND Function SUM and Average Calculation SUM Function Combining SUM and DIVIDE with ROUND Working with Multiple Sheets Referencing Data from Another Sheet Dynamic Sheet References Linking Data Between Google Sheets IMPORTRANGE Function Using IMPORTRANGE with Dynamic Cell References","title":"Table of Contents"},{"location":"tech/excel/#basic-arithmetic-and-rounding","text":"","title":"Basic Arithmetic and Rounding"},{"location":"tech/excel/#divide-function","text":"The DIVIDE function is used to divide one number by another. Syntax: =DIVIDE(numerator, denominator) Example: =DIVIDE(C9, 12) This divides the value in cell C9 by 12 .","title":"DIVIDE Function"},{"location":"tech/excel/#round-function","text":"The ROUND function is used to round a number to a specified number of digits. Syntax: =ROUND(number, num_digits) Example: =ROUND(DIVIDE(C9, 12), 0) This divides the value in C9 by 12 and rounds the result to the nearest whole number.","title":"ROUND Function"},{"location":"tech/excel/#sum-and-average-calculation","text":"","title":"SUM and Average Calculation"},{"location":"tech/excel/#sum-function","text":"The SUM function is used to add up a range of numbers. Syntax: =SUM(range) Example: =SUM(C19:C28) This adds up all the values from cell C19 to C28 .","title":"SUM Function"},{"location":"tech/excel/#combining-sum-and-divide-with-round","text":"You can combine SUM , DIVIDE , and ROUND to calculate an average and round it. Syntax: =ROUND(SUM(range)/divisor, num_digits) Example: =ROUND(SUM(C19:C28)/12, 0) This sums the values from C19 to C28 , divides by 12 , and rounds the result to the nearest whole number.","title":"Combining SUM and DIVIDE with ROUND"},{"location":"tech/excel/#working-with-multiple-sheets","text":"","title":"Working with Multiple Sheets"},{"location":"tech/excel/#referencing-data-from-another-sheet","text":"To reference a cell from another sheet in the same workbook, use the sheet name followed by an exclamation mark. Syntax: =SheetName!Cell Example: =January!A38 This references cell A38 from the sheet named January .","title":"Referencing Data from Another Sheet"},{"location":"tech/excel/#dynamic-sheet-references","text":"If you want the sheet name to be dynamic (e.g., coming from another cell), you can use the INDIRECT function. Syntax: =INDIRECT(\"'\" & CellContainingSheetName & \"'!CellReference\") Example: =INDIRECT(\"'\" & B4 & \"'!A38\") This formula uses the sheet name in cell B4 and references A38 in that sheet.","title":"Dynamic Sheet References"},{"location":"tech/excel/#linking-data-between-google-sheets","text":"","title":"Linking Data Between Google Sheets"},{"location":"tech/excel/#importrange-function","text":"The IMPORTRANGE function is used to import data from one Google Sheet to another. Syntax: =IMPORTRANGE(\"spreadsheet_url\", \"range_string\") Example: =IMPORTRANGE(\"1pCZ9dTPq0YfoT5oslhC0U_qsPLVF1Kc7ZiPC0TKkmlk\", \"2024!O19\") This imports the value from cell O19 in the 2024 sheet from another Google Sheet with the specified URL.","title":"IMPORTRANGE Function"},{"location":"tech/excel/#using-importrange-with-dynamic-cell-references","text":"To make the sheet name or range dynamic, use the IMPORTRANGE function with the INDIRECT function. Syntax: =IMPORTRANGE(\"spreadsheet_url\", INDIRECT(\"range_string\")) Example: =IMPORTRANGE(\"1pCZ9dTPq0YfoT5oslhC0U_qsPLVF1Kc7ZiPC0TKkmlk\", INDIRECT(\"'\" & B4 & \"'!O19\")) This dynamically references the sheet and cell specified in B4 .","title":"Using IMPORTRANGE with Dynamic Cell References"},{"location":"tech/github/","text":"GitHub \u00b6 Creating a New Repository \u00b6 To create a new repository on GitHub: Go to GitHub: Navigate to GitHub and log in to your account. Create a Repository: Click the \"+\" icon in the upper-right corner and select \"New repository.\" Repository Details: Enter a name for your repository, add an optional description, choose the visibility (public or private), and initialize with a README if desired. Create Repository: Click the \"Create repository\" button to finalize. Adding a Repository to Git \u00b6 To add a local repository to GitHub: Initialize Git: In your local project directory, run: git init Add Remote: Link your local repository to GitHub: git remote add origin <repository-URL> Add Files: Stage your files: git add . Commit Changes: Commit your staged files: git commit -m \"Initial commit\" Push to GitHub: Push your changes to the remote repository: git push -u origin master Committing Changes \u00b6 Committing Files: Stage Files: Add files to the staging area: git add <file> Commit Changes: Commit with a message: git commit -m \"Your commit message\" Best Practices for Commit Messages: Be Descriptive: Use clear, concise language to describe the changes. Use Imperative Mood: Write commit messages in imperative mood (e.g., \"Fix bug\" instead of \"Fixed bug\"). Limit Length: Keep the subject line under 50 characters, and use the body for additional details if necessary. Pushing and Pulling Changes \u00b6 Push Changes: Push to Remote: Upload your local commits to the remote repository: git push Pull Changes: Pull from Remote: Fetch and merge changes from the remote repository: git pull Handling Merge Conflicts \u00b6 Merge conflicts occur when changes in different branches clash. To resolve: Pull Latest Changes: Ensure you have the latest changes from the remote branch: git pull Resolve Conflicts: Open the files with conflicts, manually resolve the issues, and save the file. Stage Resolved Files: Add the resolved files: git add <file> Commit Merge: Complete the merge by committing: git commit GitHub Pages \u00b6 GitHub Pages is a feature that allows you to host websites directly from a GitHub repository. It\u2019s commonly used for project documentation, personal blogs, and portfolio sites. Key Features: Static Site Hosting: Ideal for static websites. Jekyll Integration: Supports Jekyll for static site generation. Custom Domains: Allows the use of custom domains. Getting Started: Create a Repository: Make a new repository on GitHub. Add Your Site Files: Commit your HTML/CSS/JavaScript files to the repository. Enable GitHub Pages: Go to the repository settings, find the GitHub Pages section, and choose the branch to deploy. GitHub Actions \u00b6 GitHub Actions is a CI/CD and automation tool integrated into GitHub. It allows you to automate workflows directly in your GitHub repository. Key Features: Workflows: Define workflows using YAML files. Actions: Reusable units of code that perform specific tasks. Continuous Integration/Continuous Deployment: Automate testing and deployment processes. Getting Started: Create a Workflow File: Add a .github/workflows directory and create a YAML file. Define Triggers: Specify the events that trigger the workflow (e.g., push, pull request). Add Jobs and Steps: Define the jobs and steps to run within the workflow. Example Workflow: name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Set up Node.js uses: actions/setup-node@v2 with: node-version: \"14\" - name: Install dependencies run: npm install - name: Run tests run: npm test","title":"GitHub Documentation"},{"location":"tech/github/#github","text":"","title":"GitHub"},{"location":"tech/github/#creating-a-new-repository","text":"To create a new repository on GitHub: Go to GitHub: Navigate to GitHub and log in to your account. Create a Repository: Click the \"+\" icon in the upper-right corner and select \"New repository.\" Repository Details: Enter a name for your repository, add an optional description, choose the visibility (public or private), and initialize with a README if desired. Create Repository: Click the \"Create repository\" button to finalize.","title":"Creating a New Repository"},{"location":"tech/github/#adding-a-repository-to-git","text":"To add a local repository to GitHub: Initialize Git: In your local project directory, run: git init Add Remote: Link your local repository to GitHub: git remote add origin <repository-URL> Add Files: Stage your files: git add . Commit Changes: Commit your staged files: git commit -m \"Initial commit\" Push to GitHub: Push your changes to the remote repository: git push -u origin master","title":"Adding a Repository to Git"},{"location":"tech/github/#committing-changes","text":"Committing Files: Stage Files: Add files to the staging area: git add <file> Commit Changes: Commit with a message: git commit -m \"Your commit message\" Best Practices for Commit Messages: Be Descriptive: Use clear, concise language to describe the changes. Use Imperative Mood: Write commit messages in imperative mood (e.g., \"Fix bug\" instead of \"Fixed bug\"). Limit Length: Keep the subject line under 50 characters, and use the body for additional details if necessary.","title":"Committing Changes"},{"location":"tech/github/#pushing-and-pulling-changes","text":"Push Changes: Push to Remote: Upload your local commits to the remote repository: git push Pull Changes: Pull from Remote: Fetch and merge changes from the remote repository: git pull","title":"Pushing and Pulling Changes"},{"location":"tech/github/#handling-merge-conflicts","text":"Merge conflicts occur when changes in different branches clash. To resolve: Pull Latest Changes: Ensure you have the latest changes from the remote branch: git pull Resolve Conflicts: Open the files with conflicts, manually resolve the issues, and save the file. Stage Resolved Files: Add the resolved files: git add <file> Commit Merge: Complete the merge by committing: git commit","title":"Handling Merge Conflicts"},{"location":"tech/github/#github-pages","text":"GitHub Pages is a feature that allows you to host websites directly from a GitHub repository. It\u2019s commonly used for project documentation, personal blogs, and portfolio sites. Key Features: Static Site Hosting: Ideal for static websites. Jekyll Integration: Supports Jekyll for static site generation. Custom Domains: Allows the use of custom domains. Getting Started: Create a Repository: Make a new repository on GitHub. Add Your Site Files: Commit your HTML/CSS/JavaScript files to the repository. Enable GitHub Pages: Go to the repository settings, find the GitHub Pages section, and choose the branch to deploy.","title":"GitHub Pages"},{"location":"tech/github/#github-actions","text":"GitHub Actions is a CI/CD and automation tool integrated into GitHub. It allows you to automate workflows directly in your GitHub repository. Key Features: Workflows: Define workflows using YAML files. Actions: Reusable units of code that perform specific tasks. Continuous Integration/Continuous Deployment: Automate testing and deployment processes. Getting Started: Create a Workflow File: Add a .github/workflows directory and create a YAML file. Define Triggers: Specify the events that trigger the workflow (e.g., push, pull request). Add Jobs and Steps: Define the jobs and steps to run within the workflow. Example Workflow: name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Set up Node.js uses: actions/setup-node@v2 with: node-version: \"14\" - name: Install dependencies run: npm install - name: Run tests run: npm test","title":"GitHub Actions"},{"location":"tech/mkdocs-jekyll/","text":"","title":"Mkdocs jekyll"}]}
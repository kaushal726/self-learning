var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Knowledge Bank","text":""},{"location":"index.html#your-gateway-to-technical-mastery","title":"Your Gateway to Technical Mastery","text":"<p>Welcome to the Knowledge Bank, your comprehensive resource for technical expertise and cutting-edge information. Dive into a wealth of topics and join a vibrant community of learners and professionals.</p>"},{"location":"index.html#featured-topics","title":"Featured Topics","text":"<ul> <li>Software Development</li> <li>Web Technologies</li> <li>DevOps &amp; Automation</li> <li>Data Management</li> <li>Cloud Computing</li> <li>Emerging Technologies</li> <li>Tools &amp; Techniques</li> </ul>"},{"location":"index.html#get-involved","title":"Get Involved","text":"<ul> <li>Collaborate: Share your knowledge and experiences with the community.</li> <li>Learn Together: Connect with others and explore new ideas.</li> </ul> <p>Explore, learn, and master the latest in technology with the Knowledge Bank!</p>"},{"location":"docs.html","title":"Documentation Overview","text":"<p>Welcome to the documentation portal. Here you'll find comprehensive guides and resources on a variety of technologies and topics.</p>"},{"location":"docs.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>GitHub Documentation</li> <li>Effective Prompt Documentation</li> <li>Excel</li> <li>NodeJs</li> <li>JavaScript</li> <li>ReactJs</li> <li>Database and its Evolutions</li> <li>Big Data</li> <li>Backend Design Pattern</li> <li>Playwright</li> <li>Google Tag Manager</li> <li>References</li> </ul>"},{"location":"tech/big-data.html","title":"Big Data and Modern Database Systems","text":""},{"location":"tech/big-data.html#1-introduction-to-big-data","title":"1. Introduction to Big Data","text":"<p>Big Data represents a shift in how data is generated, managed, and utilized in various industries, offering insights for decision-making, product adaptation, and operations improvement.</p> <p>Key Characteristics of Big Data:</p> <ul> <li>Volume: Large scale of data generated from various sources.</li> <li>Variety: Data in multiple formats (e.g., structured, semi-structured, unstructured).</li> <li>Velocity: High speed of data generation and need for real-time processing.</li> <li>Veracity: Ensuring data quality and managing inconsistencies and uncertainties.</li> </ul>"},{"location":"tech/big-data.html#2-database-systems-overview","title":"2. Database Systems Overview","text":"<p>Modern database systems are categorized by how they store and handle data. The two primary types are Relational Database Management Systems (RDBMS) and NoSQL Databases.</p>"},{"location":"tech/big-data.html#relational-database-management-systems-rdbms","title":"Relational Database Management Systems (RDBMS)","text":"<ul> <li>Primary Use: Structured data, such as web and business applications.</li> <li>Key Features: SQL-based querying, defined schemas, ACID transactions for consistency.</li> <li>Limitations: Limited scalability and flexibility for semi-structured or unstructured data.</li> </ul>"},{"location":"tech/big-data.html#nosql-databases","title":"NoSQL Databases","text":"<p>Designed for high-scale, distributed environments with flexible data handling capabilities, NoSQL databases address the limitations of RDBMS.</p> <p>Types of NoSQL Databases:</p> <ol> <li>Key-Value Stores: Data stored in key-value pairs.</li> <li>Document-Oriented: Stores complex data structures as documents.</li> <li>Column-Family: Organizes data in columns for high-volume queries.</li> <li>Graph Databases: Optimized for relationships between entities (e.g., social networks).</li> </ol> <p>Advantages of NoSQL Databases:</p> <ul> <li>Elastic Scaling: Scalability through horizontal scaling.</li> <li>Flexible Data Models: Supports dynamic, schema-less data.</li> <li>Cost-Efficiency: Uses distributed, low-cost commodity servers.</li> <li>Minimal DBA Dependence: Often comes with self-tuning and automatic distribution features.</li> </ul> <p>Challenges of NoSQL Databases:</p> <ul> <li>Maturity: Some are still in developmental stages.</li> <li>Support: Mostly open-source with limited commercial backing.</li> <li>Complexity in Analytics: Limited ad-hoc querying; requires programming for complex queries.</li> <li>Expertise: High demand for specialists with NoSQL knowledge.</li> </ul>"},{"location":"tech/big-data.html#newsql-databases","title":"NewSQL Databases","text":"<p>An evolution of SQL-based systems designed to handle Big Data\u2019s scale with the consistency and querying power of RDBMS, but with the distributed capabilities of NoSQL.</p>"},{"location":"tech/big-data.html#3-data-modeling-in-nosql","title":"3. Data Modeling in NoSQL","text":"<p>NoSQL databases vary in their data models, affecting how data is stored, retrieved, and processed.</p> <p>Aggregate-Oriented Models:</p> <ul> <li>Organize data in units of related information, or aggregates, for optimized performance in distributed systems.</li> <li>Support for atomic manipulation of a single aggregate at a time.</li> </ul> <p>Aggregate-Ignorant Models:</p> <ul> <li>Include RDBMS and graph databases, which do not predefine data organization, allowing for flexible data access.</li> </ul>"},{"location":"tech/big-data.html#4-schemalessness-in-nosql","title":"4. Schemalessness in NoSQL","text":"<p>While NoSQL databases do not require a fixed schema, there is often an implicit schema determined by the application interacting with the data, providing flexibility but demanding application-level data structure management.</p>"},{"location":"tech/big-data.html#5-polyglot-persistence","title":"5. Polyglot Persistence","text":"<p>Refers to the strategy of using multiple database technologies within the same application, choosing the optimal storage solution based on specific data and access requirements.</p>"},{"location":"tech/big-data.html#6-big-data-processing-techniques","title":"6. Big Data Processing Techniques","text":"<p>Different techniques are used to manage Big Data efficiently:</p> <ul> <li>OLTP (Online Transaction Processing): Used by RDBMS for fast transactions.</li> <li>OLAP (Online Analytical Processing): For multidimensional queries, often in data warehousing.</li> <li>RTAP (Real-Time Analytic Processing): Supports real-time Big Data processing with continuous data streaming and immediate querying.</li> </ul>"},{"location":"tech/big-data.html#7-case-study-facebooks-architecture-circa-2010","title":"7. Case Study: Facebook\u2019s Architecture (circa 2010)","text":"<p>Facebook exemplifies the scale challenges that led to the adoption of NoSQL and distributed systems:</p> <ul> <li>Cassandra: NoSQL storage with no single point of failure, used for inbox searches.</li> <li>Hadoop/Hive: Open-source MapReduce for handling large datasets, with Hive enabling SQL-like querying.</li> <li>Memcached: Memory caching to reduce database load, providing faster data retrieval.</li> <li>HBase: Columnar database for real-time processing, built on the Google BigTable model, used for messaging and communication services.</li> </ul>"},{"location":"tech/database.html","title":"Databases","text":""},{"location":"tech/database.html#database-modeling-happens-at-three-levels","title":"Database modeling happens at three levels:","text":"<ol> <li>Conceptual \u2013 Maps real-world objects and relationships at a high level.Eg is Er, UML, Uml 2.0</li> <li>Logical \u2013 Defines structures to store data, like tables or graphs.Example XML, Graph</li> <li>Physical \u2013 Implements these structures in a technical system. Example data files, index structure.</li> </ol>"},{"location":"tech/database.html#evolution-of-database-models","title":"Evolution of Database Models:","text":"<ul> <li>First Generation: Hierarchical and Network Models (tree and navigational structures for specific tasks).</li> <li>Second Generation: Relational Model (E.F. Codd's table-based structure, easy to use and mathematically sound).</li> <li>Third Generation: Post-Relational Models (Object-Relational, XML, NoSQL, and NewSQL databases, all tailored to handle modern and complex data structures, especially for Big Data).</li> </ul> <p>Relational databases are reliable but struggle with complex or large data sets, leading to the rise of NoSQL and NewSQL for high-performance, scalable applications.</p>"},{"location":"tech/effective-prompts.html","title":"Effective Prompt Documentation","text":""},{"location":"tech/effective-prompts.html#documentation-writing-effective-prompts","title":"Documentation: Writing Effective Prompts","text":""},{"location":"tech/effective-prompts.html#introduction","title":"Introduction","text":"<p>Creating effective prompts is essential for leveraging the capabilities of AI models and ensuring that the output aligns with your expectations. This guide will provide you with tips and best practices for crafting prompts that yield accurate, relevant, and creative responses from AI tools.</p>"},{"location":"tech/effective-prompts.html#1-understand-the-purpose-of-your-prompt","title":"1. Understand the Purpose of Your Prompt","text":"<p>Before writing a prompt, clarify what you want to achieve. Are you looking for a specific answer, generating creative content, or seeking detailed information? Understanding your goal helps in crafting a precise prompt that guides the AI effectively.</p> <ul> <li>Example: If you want the AI to generate a summary of a topic, specify that. If you're seeking creative ideas, frame your prompt accordingly.</li> </ul>"},{"location":"tech/effective-prompts.html#2-be-specific-and-clear","title":"2. Be Specific and Clear","text":"<p>Ambiguity can lead to unexpected or irrelevant results. Make your prompts as specific as possible. The more details you provide, the better the AI can understand and respond.</p> <ul> <li>Vague Prompt: \"Tell me about the world.\"</li> <li>Specific Prompt: \"Provide a summary of the major environmental issues currently affecting the world, including climate change, pollution, and deforestation.\"</li> </ul>"},{"location":"tech/effective-prompts.html#3-use-simple-and-clear-language","title":"3. Use Simple and Clear Language","text":"<p>Use straightforward language that avoids jargon or complex sentence structures. This ensures that the AI understands your request and provides a relevant response.</p> <ul> <li>Complex Prompt: \"Expound on the intricacies of the contemporary socio-political landscape.\"</li> <li>Simpler Prompt: \"Describe the main social and political issues in today's world.\"</li> </ul>"},{"location":"tech/effective-prompts.html#4-provide-context","title":"4. Provide Context","text":"<p>Giving context helps the AI generate responses that are relevant and accurate. Include background information or specify the scenario in which the response should be framed.</p> <ul> <li>Example: \"Imagine you are a historian in the year 2100. Describe how the internet influenced global society in the 21st century.\"</li> </ul>"},{"location":"tech/effective-prompts.html#5-ask-open-ended-questions-for-creative-output","title":"5. Ask Open-Ended Questions for Creative Output","text":"<p>If you want to explore ideas or generate creative content, ask open-ended questions. This encourages the AI to provide more expansive and imaginative responses.</p> <ul> <li>Example: \"What are some creative ways to promote environmental awareness in urban communities?\"</li> </ul>"},{"location":"tech/effective-prompts.html#6-set-constraints-when-needed","title":"6. Set Constraints When Needed","text":"<p>Constraints help guide the AI to stay within specific boundaries. This is useful when you need the output in a certain format, length, or style.</p> <ul> <li>Example: \"Write a short poem (4 lines) about the ocean.\"</li> </ul>"},{"location":"tech/effective-prompts.html#7-use-examples-to-guide-responses","title":"7. Use Examples to Guide Responses","text":"<p>Providing examples of the type of answer you expect can be very helpful. This sets a reference for the AI to mimic, ensuring the response meets your expectations.</p> <ul> <li>Example: \"Describe the plot of a movie in two sentences, like this: 'In Finding Nemo, a clownfish goes on an epic journey to rescue his son from a fish tank. Along the way, he encounters sharks, jellyfish, and turtles.'\"</li> </ul>"},{"location":"tech/effective-prompts.html#8-utilize-the-act-as-method","title":"8. Utilize the \"Act As\" Method","text":"<p>Directing the AI to respond as a specific character or role helps the AI adopt the perspective or tone you are looking for.</p> <ul> <li>Example: \"Act as a tech support specialist explaining how to reset a password to a non-technical user.\"</li> </ul>"},{"location":"tech/effective-prompts.html#9-iterate-and-refine","title":"9. Iterate and Refine","text":"<p>If the response isn't as expected, refine your prompt. Adjust the wording, add more details, or change the format to improve the outcome.</p> <ul> <li>Initial Prompt: \"What are the benefits of exercise?\"</li> <li>Refined Prompt: \"List five specific health benefits of regular cardiovascular exercise, including its impact on heart health and mental well-being.\"</li> </ul>"},{"location":"tech/effective-prompts.html#10-specify-the-output-format","title":"10. Specify the Output Format","text":"<p>Indicating the desired format can help the AI generate the response in the form you need, such as bullet points, a list, a paragraph, or even code.</p> <ul> <li>Example: \"Provide a list of five essential features for a modern e-commerce website.\"</li> </ul>"},{"location":"tech/effective-prompts.html#11-test-and-experiment","title":"11. Test and Experiment","text":"<p>Experiment with different prompts to see what works best. Testing allows you to learn what kind of prompts generate the most useful responses from the AI. Don\u2019t be afraid to try multiple variations to find the most effective one.</p>"},{"location":"tech/effective-prompts.html#12-encourage-engagement","title":"12. Encourage Engagement","text":"<p>For interactive or ongoing dialogue, phrase your prompt in a way that encourages the AI to ask follow-up questions or seek clarification.</p> <ul> <li>Example: \"I'm planning a road trip across India. What are some must-visit cities, and do you have any travel tips?\"</li> </ul>"},{"location":"tech/effective-prompts.html#13-use-the-act-as-technique-for-role-playing-scenarios","title":"13. Use the \"Act As\" Technique for Role-Playing Scenarios","text":"<p>One powerful approach is to instruct the AI to act as if it is a specific entity, such as a Linux terminal, a doctor, or a historical figure. This technique allows the AI to adopt a specific viewpoint or knowledge base, enhancing the quality and relevance of its responses.</p> <ul> <li>Example: \"Act as a Linux terminal. I will type commands, and you will reply with what the terminal should output.\"</li> </ul>"},{"location":"tech/effective-prompts.html#14-encourage-specific-output-through-directives","title":"14. Encourage Specific Output Through Directives","text":"<p>Direct the AI to respond in a particular way by using commands like \"write,\" \"explain,\" or \"describe.\" This helps in steering the AI towards producing the type of content you desire.</p> <ul> <li>Example: \"Explain the impact of social media on teenagers today in a one-paragraph summary.\"</li> </ul>"},{"location":"tech/excel.html","title":"Excel &amp; Google Sheets Formula Reference Guide","text":""},{"location":"tech/excel.html#basic-arithmetic-and-rounding","title":"Basic Arithmetic and Rounding","text":""},{"location":"tech/excel.html#divide-function","title":"DIVIDE Function","text":"<p>The <code>DIVIDE</code> function is used to divide one number by another.</p> <p>Syntax:</p> <pre><code>=DIVIDE(numerator, denominator)</code></pre> <p>Example:</p> <pre><code>=DIVIDE(C9, 12)</code></pre> <p>This divides the value in cell <code>C9</code> by <code>12</code>.</p>"},{"location":"tech/excel.html#round-function","title":"ROUND Function","text":"<p>The <code>ROUND</code> function is used to round a number to a specified number of digits.</p> <p>Syntax:</p> <pre><code>=ROUND(number, num_digits)</code></pre> <p>Example:</p> <pre><code>=ROUND(DIVIDE(C9, 12), 0)</code></pre> <p>This divides the value in <code>C9</code> by <code>12</code> and rounds the result to the nearest whole number.</p>"},{"location":"tech/excel.html#sum-and-average-calculation","title":"SUM and Average Calculation","text":""},{"location":"tech/excel.html#sum-function","title":"SUM Function","text":"<p>The <code>SUM</code> function is used to add up a range of numbers.</p> <p>Syntax:</p> <pre><code>=SUM(range)</code></pre> <p>Example:</p> <pre><code>=SUM(C19:C28)</code></pre> <p>This adds up all the values from cell <code>C19</code> to <code>C28</code>.</p>"},{"location":"tech/excel.html#combining-sum-and-divide-with-round","title":"Combining SUM and DIVIDE with ROUND","text":"<p>You can combine <code>SUM</code>, <code>DIVIDE</code>, and <code>ROUND</code> to calculate an average and round it.</p> <p>Syntax:</p> <pre><code>=ROUND(SUM(range)/divisor, num_digits)</code></pre> <p>Example:</p> <pre><code>=ROUND(SUM(C19:C28)/12, 0)</code></pre> <p>This sums the values from <code>C19</code> to <code>C28</code>, divides by <code>12</code>, and rounds the result to the nearest whole number.</p>"},{"location":"tech/excel.html#working-with-multiple-sheets","title":"Working with Multiple Sheets","text":""},{"location":"tech/excel.html#referencing-data-from-another-sheet","title":"Referencing Data from Another Sheet","text":"<p>To reference a cell from another sheet in the same workbook, use the sheet name followed by an exclamation mark.</p> <p>Syntax:</p> <pre><code>=SheetName!Cell</code></pre> <p>Example:</p> <pre><code>=January!A38</code></pre> <p>This references cell <code>A38</code> from the sheet named <code>January</code>.</p>"},{"location":"tech/excel.html#dynamic-sheet-references","title":"Dynamic Sheet References","text":"<p>If you want the sheet name to be dynamic (e.g., coming from another cell), you can use the <code>INDIRECT</code> function.</p> <p>Syntax:</p> <pre><code>=INDIRECT(\"'\" &amp; CellContainingSheetName &amp; \"'!CellReference\")</code></pre> <p>Example:</p> <pre><code>=INDIRECT(\"'\" &amp; B4 &amp; \"'!A38\")</code></pre> <p>This formula uses the sheet name in cell <code>B4</code> and references <code>A38</code> in that sheet.</p>"},{"location":"tech/excel.html#linking-data-between-google-sheets","title":"Linking Data Between Google Sheets","text":""},{"location":"tech/excel.html#importrange-function","title":"IMPORTRANGE Function","text":"<p>The <code>IMPORTRANGE</code> function is used to import data from one Google Sheet to another.</p> <p>Syntax:</p> <pre><code>=IMPORTRANGE(\"spreadsheet_url\", \"range_string\")</code></pre> <p>Example:</p> <pre><code>=IMPORTRANGE(\"1pCZ9dTPq0YfoT5oslhC0U_qsPLVF1Kc7ZiPC0TKkmlk\", \"2024!O19\")</code></pre> <p>This imports the value from cell <code>O19</code> in the <code>2024</code> sheet from another Google Sheet with the specified URL.</p>"},{"location":"tech/excel.html#using-importrange-with-dynamic-cell-references","title":"Using IMPORTRANGE with Dynamic Cell References","text":"<p>To make the sheet name or range dynamic, use the <code>IMPORTRANGE</code> function with the <code>INDIRECT</code> function.</p> <p>Syntax:</p> <pre><code>=IMPORTRANGE(\"spreadsheet_url\", INDIRECT(\"range_string\"))</code></pre> <p>Example:</p> <pre><code>=IMPORTRANGE(\"1pCZ9dTPq0YfoT5oslhC0U_qsPLVF1Kc7ZiPC0TKkmlk\", INDIRECT(\"'\" &amp; B4 &amp; \"'!O19\"))</code></pre> <p>This dynamically references the sheet and cell specified in <code>B4</code>.</p>"},{"location":"tech/github.html","title":"GitHub","text":""},{"location":"tech/github.html#creating-a-new-repository","title":"Creating a New Repository","text":"<p>To create a new repository on GitHub:</p> <ol> <li>Go to GitHub: Navigate to GitHub and log in to your account.</li> <li>Create a Repository: Click the \"+\" icon in the upper-right corner and select \"New repository.\"</li> <li>Repository Details: Enter a name for your repository, add an optional description, choose the visibility (public or private), and initialize with a README if desired.</li> <li>Create Repository: Click the \"Create repository\" button to finalize.</li> </ol>"},{"location":"tech/github.html#adding-a-repository-to-git","title":"Adding a Repository to Git","text":"<p>To add a local repository to GitHub:</p> <ol> <li>Initialize Git: In your local project directory, run:    <pre><code>git init</code></pre></li> <li>Add Remote: Link your local repository to GitHub:    <pre><code>git remote add origin &lt;repository-URL&gt;</code></pre></li> <li>Add Files: Stage your files:    <pre><code>git add .</code></pre></li> <li>Commit Changes: Commit your staged files:    <pre><code>git commit -m \"Initial commit\"</code></pre></li> <li>Push to GitHub: Push your changes to the remote repository:    <pre><code>git push -u origin master</code></pre></li> </ol>"},{"location":"tech/github.html#committing-changes","title":"Committing Changes","text":"<p>Committing Files:</p> <ol> <li>Stage Files: Add files to the staging area:    <pre><code>git add &lt;file&gt;</code></pre></li> <li>Commit Changes: Commit with a message:    <pre><code>git commit -m \"Your commit message\"</code></pre></li> </ol> <p>Best Practices for Commit Messages:</p> <ul> <li>Be Descriptive: Use clear, concise language to describe the changes.</li> <li>Use Imperative Mood: Write commit messages in imperative mood (e.g., \"Fix bug\" instead of \"Fixed bug\").</li> <li>Limit Length: Keep the subject line under 50 characters, and use the body for additional details if necessary.</li> </ul>"},{"location":"tech/github.html#pushing-and-pulling-changes","title":"Pushing and Pulling Changes","text":"<p>Push Changes:</p> <ol> <li>Push to Remote: Upload your local commits to the remote repository:    <pre><code>git push</code></pre></li> </ol> <p>Pull Changes:</p> <ol> <li>Pull from Remote: Fetch and merge changes from the remote repository:    <pre><code>git pull</code></pre></li> </ol>"},{"location":"tech/github.html#handling-merge-conflicts","title":"Handling Merge Conflicts","text":"<p>Merge conflicts occur when changes in different branches clash. To resolve:</p> <ol> <li>Pull Latest Changes: Ensure you have the latest changes from the remote branch:    <pre><code>git pull</code></pre></li> <li>Resolve Conflicts: Open the files with conflicts, manually resolve the issues, and save the file.</li> <li>Stage Resolved Files: Add the resolved files:    <pre><code>git add &lt;file&gt;</code></pre></li> <li>Commit Merge: Complete the merge by committing:    <pre><code>git commit</code></pre></li> </ol>"},{"location":"tech/github.html#github-pages","title":"GitHub Pages","text":"<p>GitHub Pages is a feature that allows you to host websites directly from a GitHub repository. It\u2019s commonly used for project documentation, personal blogs, and portfolio sites.</p> <p>Key Features:</p> <ul> <li>Static Site Hosting: Ideal for static websites.</li> <li>Jekyll Integration: Supports Jekyll for static site generation.</li> <li>Custom Domains: Allows the use of custom domains.</li> </ul> <p>Getting Started:</p> <ol> <li>Create a Repository: Make a new repository on GitHub.</li> <li>Add Your Site Files: Commit your HTML/CSS/JavaScript files to the repository.</li> <li>Enable GitHub Pages: Go to the repository settings, find the GitHub Pages section, and choose the branch to deploy.</li> </ol>"},{"location":"tech/github.html#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions is a CI/CD and automation tool integrated into GitHub. It allows you to automate workflows directly in your GitHub repository.</p> <p>Key Features:</p> <ul> <li>Workflows: Define workflows using YAML files.</li> <li>Actions: Reusable units of code that perform specific tasks.</li> <li>Continuous Integration/Continuous Deployment: Automate testing and deployment processes.</li> </ul> <p>Getting Started:</p> <ol> <li>Create a Workflow File: Add a <code>.github/workflows</code> directory and create a YAML file.</li> <li>Define Triggers: Specify the events that trigger the workflow (e.g., push, pull request).</li> <li>Add Jobs and Steps: Define the jobs and steps to run within the workflow.</li> </ol> <p>Example Workflow:</p> <pre><code>name: CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"14\"\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test</code></pre>"},{"location":"tech/javascript.html","title":"JavaScript Documentation","text":""},{"location":"tech/javascript.html#what-is-javascript-js","title":"What is JavaScript (JS)","text":"<p>JavaScript (JS) is a programming language used to make web pages dynamic and interactive. It runs in the browser and helps add functionalities like animations, event handling, and updating content dynamically. It is a lightweight, interpreted, or just-in-time compiled language.</p> <p>Real-Life Example: Imagine you are on an e-commerce site. When you click on \"Add to Cart,\" the item is instantly added without reloading the page. JavaScript makes this possible.</p>"},{"location":"tech/javascript.html#javascript-engine","title":"JavaScript Engine","text":"<p>A JavaScript engine is a program that executes JavaScript code. Every browser has its own JS engine. For example:</p> <ul> <li>Google Chrome uses V8.</li> <li>Firefox uses SpiderMonkey.</li> <li>Microsoft Edge uses Chakra.</li> </ul> <p>Real-Life Example: Think of the engine as the \"brain\" of the browser that understands and executes JavaScript instructions.</p>"},{"location":"tech/javascript.html#es-versions","title":"ES Versions","text":"<p>ES (ECMAScript) is the standard of JavaScript. Major versions include:</p> <ul> <li>ES5: Introduced <code>strict mode</code>, JSON, and <code>Array.prototype</code> methods like <code>forEach</code>.</li> <li>ES6 (ES2015): Brought features like <code>let</code>, <code>const</code>, arrow functions, classes, and promises.</li> <li>ESNext: Refers to the latest features beyond ES6.</li> </ul> <p>Real-Life Example: ES6 added features like <code>const</code> and <code>let</code> to avoid the confusion of using <code>var</code>.</p>"},{"location":"tech/javascript.html#strict-mode-in-javascript","title":"Strict Mode in JavaScript","text":"<p>\"Strict mode\" is a way to write cleaner JavaScript by eliminating silent errors. It prevents using undeclared variables and certain bad practices.</p> <p>Real-Life Example:</p> <pre><code>\"use strict\";\nx = 10; // Error: 'x' is not defined.</code></pre>"},{"location":"tech/javascript.html#call","title":"Call","text":"<p>The <code>call()</code> method allows you to call a function with a specific <code>this</code> context.</p> <p>Real-Life Example:</p> <pre><code>const person = { name: \"Kaushal\" };\nfunction greet() {\n  console.log(`Hello, ${this.name}`);\n}\ngreet.call(person); // Hello, Kaushal</code></pre>"},{"location":"tech/javascript.html#apply","title":"Apply","text":"<p><code>apply()</code> is similar to <code>call()</code>, but it takes arguments as an array.</p> <p>Real-Life Example:</p> <pre><code>const person = { name: \"Kaushal\" };\nfunction greet(city, country) {\n  console.log(`Hello, ${this.name} from ${city}, ${country}`);\n}\ngreet.apply(person, [\"Delhi\", \"India\"]); // Hello, Kaushal from Delhi, India</code></pre>"},{"location":"tech/javascript.html#bind","title":"Bind","text":"<p><code>bind()</code> creates a new function with <code>this</code> context bound to a specific object.</p> <p>Real-Life Example:</p> <pre><code>const person = { name: \"Kaushal\" };\nfunction greet() {\n  console.log(`Hello, ${this.name}`);\n}\nconst boundGreet = greet.bind(person);\nboundGreet(); // Hello, Kaushal</code></pre>"},{"location":"tech/javascript.html#higher-order-functions","title":"Higher-Order Functions","text":"<p>A function that takes another function as an argument or returns a function is called a higher-order function.</p> <p>Real-Life Example:</p> <pre><code>function greet(name) {\n  return `Hello, ${name}`;\n}\nfunction processUser(name, func) {\n  console.log(func(name));\n}\nprocessUser(\"Kaushal\", greet); // Hello, Kaushal</code></pre>"},{"location":"tech/javascript.html#first-class-functions","title":"First-Class Functions","text":"<p>JavaScript treats functions as first-class citizens, meaning they can be stored in variables, passed as arguments, or returned from other functions.</p> <p>Real-Life Example:</p> <pre><code>const greet = function (name) {\n  return `Hello, ${name}`;\n};\nconsole.log(greet(\"Kaushal\")); // Hello, Kaushal</code></pre>"},{"location":"tech/javascript.html#let-var-const","title":"let, var, const","text":"<ul> <li><code>var</code>: Function-scoped.</li> <li><code>let</code>: Block-scoped.</li> <li><code>const</code>: Block-scoped and immutable (cannot be reassigned).</li> </ul> <p>Real-Life Example:</p> <pre><code>{\n  var x = 10; // Accessible outside\n  let y = 20; // Block-scoped\n  const z = 30; // Block-scoped and immutable\n}\nconsole.log(x); // 10\n// console.log(y); // Error\n// console.log(z); // Error</code></pre>"},{"location":"tech/javascript.html#callback-hell","title":"Callback Hell","text":"<p>Callback hell occurs when nested callbacks make the code unreadable.</p> <p>Real-Life Example:</p> <pre><code>setTimeout(() =&gt; {\n  console.log(\"Step 1\");\n  setTimeout(() =&gt; {\n    console.log(\"Step 2\");\n    setTimeout(() =&gt; {\n      console.log(\"Step 3\");\n    }, 1000);\n  }, 1000);\n}, 1000);</code></pre>"},{"location":"tech/javascript.html#promises","title":"Promises","text":"<p>Promises help handle asynchronous tasks by providing <code>.then()</code> and <code>.catch()</code> methods to avoid callback hell.</p> <p>Real-Life Example:</p> <pre><code>const fetchData = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; resolve(\"Data fetched!\"), 1000);\n});\nfetchData.then((data) =&gt; console.log(data)); // Data fetched!</code></pre>"},{"location":"tech/javascript.html#implicit-type-conversion","title":"Implicit Type Conversion","text":"<p>JavaScript converts types automatically in some situations.</p> <p>Real-Life Example:</p> <pre><code>console.log(\"5\" + 1); // \"51\" (string)\nconsole.log(\"5\" - 1); // 4 (number)</code></pre>"},{"location":"tech/javascript.html#hoisting","title":"Hoisting","text":"<p>Hoisting is a behavior in JavaScript where variables and functions are moved to the top of their scope during the compilation phase.</p> <p>Real-Life Example:</p> <pre><code>console.log(x); // undefined (hoisted, but not initialized)\nvar x = 10;</code></pre> <p>With <code>let</code> and <code>const</code>:</p> <pre><code>console.log(y); // ReferenceError: Cannot access 'y' before initialization\nlet y = 20;</code></pre>"},{"location":"tech/javascript.html#vs","title":"== vs ===","text":"<ul> <li><code>==</code> checks for value equality, performing type conversion if needed.</li> <li><code>===</code> checks for strict equality (value and type must match).</li> </ul> <p>Real-Life Example:</p> <pre><code>console.log(5 == \"5\"); // true (type conversion happens)\nconsole.log(5 === \"5\"); // false (type mismatch)</code></pre>"},{"location":"tech/javascript.html#this-keyword","title":"<code>this</code> Keyword","text":"<p><code>this</code> refers to the object that is executing the function. It can vary depending on how the function is called.</p> <p>Real-Life Example:</p> <pre><code>const person = {\n  name: \"Kaushal\",\n  greet() {\n    console.log(this.name);\n  },\n};\nperson.greet(); // Kaushal</code></pre>"},{"location":"tech/javascript.html#self-invoking-functionsiife","title":"Self-Invoking Functions/IIFE","text":"<p>An Immediately Invoked Function Expression (IIFE) is a function that runs as soon as it is defined.</p> <p>Real-Life Example:</p> <pre><code>(function () {\n  console.log(\"I run immediately!\");\n})(); // I run immediately!</code></pre>"},{"location":"tech/javascript.html#currying","title":"Currying","text":"<p>Currying is the process of transforming a function with multiple arguments into a series of functions that each take a single argument.</p> <p>Real-Life Example:</p> <pre><code>function add(a) {\n  return function (b) {\n    return a + b;\n  };\n}\nconsole.log(add(5)(10)); // 15</code></pre>"},{"location":"tech/javascript.html#unary-functions","title":"Unary Functions","text":"<p>A unary function is a function that takes only one argument.</p> <p>Real-Life Example:</p> <pre><code>const square = (x) =&gt; x * x;\nconsole.log(square(5)); // 25</code></pre>"},{"location":"tech/javascript.html#pure-functions","title":"Pure Functions","text":"<p>A pure function is one that does not modify external variables or states and always produces the same output for the same input.</p> <p>Real-Life Example:</p> <pre><code>function add(a, b) {\n  return a + b;\n}\nconsole.log(add(2, 3)); // 5</code></pre>"},{"location":"tech/javascript.html#event-bubbling","title":"Event Bubbling","text":"<p>Event bubbling is when an event propagates from the child element to its parent.</p> <p>Real-Life Example:</p> <pre><code>&lt;div onclick=\"console.log('Parent clicked')\"&gt;\n  &lt;button onclick=\"console.log('Button clicked')\"&gt;Click Me&lt;/button&gt;\n&lt;/div&gt;\n// Clicking the button will trigger both logs.</code></pre>"},{"location":"tech/javascript.html#event-delegation","title":"Event Delegation","text":"<p>Event delegation involves attaching a single event listener to a parent element to handle events for its child elements.</p> <p>Real-Life Example:</p> <pre><code>document.getElementById(\"parent\").addEventListener(\"click\", (e) =&gt; {\n  if (e.target.tagName === \"BUTTON\") {\n    console.log(\"Button clicked\");\n  }\n});</code></pre>"},{"location":"tech/javascript.html#event-handling","title":"Event Handling","text":"<p>Event handling involves adding listeners to elements to perform actions when an event occurs (like <code>click</code>, <code>hover</code>, etc.).</p> <p>Real-Life Example:</p> <pre><code>document.getElementById(\"myButton\").addEventListener(\"click\", () =&gt; {\n  alert(\"Button clicked!\");\n});</code></pre>"},{"location":"tech/javascript.html#closure","title":"Closure","text":"<p>A closure is created when a function remembers variables from its outer scope even after the outer function has finished execution.</p> <p>Real-Life Example:</p> <pre><code>function outer() {\n  let count = 0;\n  return function () {\n    count++;\n    console.log(count);\n  };\n}\nconst increment = outer();\nincrement(); // 1\nincrement(); // 2</code></pre>"},{"location":"tech/javascript.html#data-binding","title":"Data Binding","text":"<p>Data binding is the process of connecting UI elements to application data so they update automatically when the data changes.</p> <p>Real-Life Example: In frameworks like React, <code>state</code> binds data to components, and when the state changes, the UI updates.</p>"},{"location":"tech/javascript.html#nullish-operator","title":"Nullish Operator (<code>??</code>)","text":"<p>The nullish operator returns the right-hand value only if the left-hand value is <code>null</code> or <code>undefined</code>.</p> <p>Real-Life Example:</p> <pre><code>let value = null;\nlet defaultValue = value ?? \"Default\";\nconsole.log(defaultValue); // Default</code></pre>"},{"location":"tech/javascript.html#debouncing","title":"Debouncing","text":"<p>Debouncing ensures a function is only executed after a specified time has passed since the last invocation.</p> <p>Real-Life Example: Typing in a search bar delays API calls until the user stops typing.</p> <pre><code>function debounce(func, delay) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() =&gt; func.apply(this, args), delay);\n  };\n}</code></pre>"},{"location":"tech/javascript.html#throttling","title":"Throttling","text":"<p>Throttling ensures a function executes at regular intervals, even if triggered continuously.</p> <p>Real-Life Example: Scrolling events trigger updates at fixed intervals.</p> <pre><code>function throttle(func, delay) {\n  let lastCall = 0;\n  return function (...args) {\n    const now = Date.now();\n    if (now - lastCall &gt;= delay) {\n      lastCall = now;\n      func.apply(this, args);\n    }\n  };\n}</code></pre>"},{"location":"tech/javascript.html#spread-operator","title":"Spread Operator","text":"<p>The spread operator (<code>...</code>) expands iterable elements into individual elements.</p> <p>Real-Life Example:</p> <pre><code>const arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5];\nconsole.log(newArr); // [1, 2, 3, 4, 5]</code></pre>"},{"location":"tech/javascript.html#rest-operator","title":"Rest Operator","text":"<p>The rest operator (<code>...</code>) combines multiple elements into a single array.</p> <p>Real-Life Example:</p> <pre><code>function sum(...numbers) {\n  return numbers.reduce((acc, num) =&gt; acc + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4)); // 10</code></pre>"},{"location":"tech/javascript.html#data-storage-in-javascript","title":"Data Storage in JavaScript","text":"<p>Web applications often require ways to store data on the client side. Let's dive into the most commonly used storage mechanisms: Local Storage, Session Storage, IndexedDB, and Cookies. We'll explore what they are, how they work, their differences, and real-life examples.</p>"},{"location":"tech/javascript.html#1-local-storage","title":"1. Local Storage","text":"<p>Local Storage is a key-value pair-based storage mechanism that allows you to store data in the browser without an expiration date. The data persists even after the browser is closed and reopened.</p>"},{"location":"tech/javascript.html#key-characteristics","title":"Key Characteristics:","text":"<ul> <li>Stores data permanently (until explicitly removed).</li> <li>Maximum storage capacity: ~5MB per domain (varies by browser).</li> <li>Data is stored as strings.</li> <li>Accessible only within the same domain.</li> </ul>"},{"location":"tech/javascript.html#apis-and-methods","title":"APIs and Methods:","text":"<ul> <li><code>localStorage.setItem(key, value)</code> \u2013 Store a key-value pair.</li> <li><code>localStorage.getItem(key)</code> \u2013 Retrieve a value using its key.</li> <li><code>localStorage.removeItem(key)</code> \u2013 Remove a key-value pair.</li> <li><code>localStorage.clear()</code> \u2013 Clear all stored data.</li> </ul>"},{"location":"tech/javascript.html#real-life-example","title":"Real-Life Example:","text":"<p>Saving user preferences:</p> <pre><code>// Storing a user's theme preference\nlocalStorage.setItem(\"theme\", \"dark\");\n\n// Retrieving the stored theme\nconst theme = localStorage.getItem(\"theme\");\nconsole.log(theme); // Output: dark\n\n// Removing the stored theme\nlocalStorage.removeItem(\"theme\");</code></pre>"},{"location":"tech/javascript.html#2-session-storage","title":"2. Session Storage","text":"<p>Session Storage is similar to Local Storage but with one key difference: the data is cleared when the browser tab is closed.</p>"},{"location":"tech/javascript.html#key-characteristics_1","title":"Key Characteristics:","text":"<ul> <li>Data persists only for the session (browser tab).</li> <li>Maximum storage capacity: ~5MB per domain (same as Local Storage).</li> <li>Data is stored as strings.</li> <li>Only accessible within the same tab and domain.</li> </ul>"},{"location":"tech/javascript.html#apis-and-methods_1","title":"APIs and Methods:","text":"<ul> <li>Same as Local Storage (<code>setItem</code>, <code>getItem</code>, <code>removeItem</code>, <code>clear</code>).</li> </ul>"},{"location":"tech/javascript.html#real-life-example_1","title":"Real-Life Example:","text":"<p>Storing temporary data like form inputs:</p> <pre><code>// Saving form input\nsessionStorage.setItem(\"username\", \"Kaushal\");\n\n// Retrieving the input\nconst username = sessionStorage.getItem(\"username\");\nconsole.log(username); // Output: Kaushal\n\n// Data will be cleared once the tab is closed.</code></pre>"},{"location":"tech/javascript.html#3-indexeddb","title":"3. IndexedDB","text":"<p>IndexedDB is a low-level API for client-side storage of large amounts of structured data, including files and blobs. It is asynchronous and transactional, designed for more complex applications.</p>"},{"location":"tech/javascript.html#key-characteristics_2","title":"Key Characteristics:","text":"<ul> <li>Stores data in the form of key-value pairs or objects.</li> <li>Can store structured data (e.g., arrays, objects, blobs).</li> <li>Allows queries using indexes and cursors.</li> <li>Storage size can be much larger (hundreds of MBs).</li> <li>Data persists even after the browser is closed.</li> </ul>"},{"location":"tech/javascript.html#apis-and-methods_2","title":"APIs and Methods:","text":"<p>IndexedDB uses an event-based API, so it\u2019s slightly more complex than Local or Session Storage.</p>"},{"location":"tech/javascript.html#real-life-example_2","title":"Real-Life Example:","text":"<p>Storing offline application data:</p> <pre><code>// Open a database\nconst request = indexedDB.open(\"MyDatabase\", 1);\n\nrequest.onupgradeneeded = function (event) {\n  const db = event.target.result;\n  // Create an object store\n  const objectStore = db.createObjectStore(\"Users\", { keyPath: \"id\" });\n  objectStore.createIndex(\"name\", \"name\", { unique: false });\n};\n\nrequest.onsuccess = function (event) {\n  const db = event.target.result;\n  const transaction = db.transaction(\"Users\", \"readwrite\");\n  const store = transaction.objectStore(\"Users\");\n\n  // Add data\n  store.add({ id: 1, name: \"Kaushal\", age: 25 });\n};</code></pre>"},{"location":"tech/javascript.html#4-cookies","title":"4. Cookies","text":"<p>Cookies are small pieces of data stored in the browser, mainly used for session tracking and authentication. Cookies can be sent back and forth between the client and server with every HTTP request.</p>"},{"location":"tech/javascript.html#key-characteristics_3","title":"Key Characteristics:","text":"<ul> <li>Data is stored as key-value pairs.</li> <li>Cookies are sent to the server with each HTTP request.</li> <li>Can be set to expire after a certain time (<code>Expires</code> or <code>Max-Age</code> attributes).</li> <li>Limited storage capacity: ~4KB per cookie.</li> <li>Can be made secure using the <code>Secure</code> and <code>HttpOnly</code> flags.</li> </ul>"},{"location":"tech/javascript.html#apis-and-methods_3","title":"APIs and Methods:","text":"<ul> <li>Setting a cookie:   <pre><code>document.cookie =\n  \"name=Kaushal; expires=Fri, 31 Dec 2025 23:59:59 GMT; path=/\";</code></pre></li> <li>Reading cookies:   <pre><code>console.log(document.cookie); // Output: name=Kaushal</code></pre></li> <li>Deleting cookies:   <pre><code>document.cookie = \"name=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";</code></pre></li> </ul>"},{"location":"tech/javascript.html#real-life-example_3","title":"Real-Life Example:","text":"<p>Storing login tokens:</p> <pre><code>// Setting a cookie with an expiration time\ndocument.cookie = \"token=abc123; expires=Fri, 31 Dec 2025 23:59:59 GMT; path=/\";\n\n// Reading the token cookie\nconst cookies = document.cookie;\nconsole.log(cookies); // Output: token=abc123</code></pre>"},{"location":"tech/javascript.html#comparison-of-storage-mechanisms","title":"Comparison of Storage Mechanisms","text":"Feature Local Storage Session Storage IndexedDB Cookies Data Persistence Permanent Session-only Permanent Depends on expiration Capacity ~5MB ~5MB Hundreds of MBs ~4KB per cookie Data Type Strings Strings Key-value/object Strings Server Communication No No No Yes Use Case Preferences, settings Temporary data Complex structured data Authentication, tracking"},{"location":"tech/javascript.html#best-practices","title":"Best Practices","text":"<ul> <li>Use Local Storage for simple, permanent client-side storage.</li> <li>Use Session Storage for temporary data like unsaved form inputs.</li> <li>Use IndexedDB for large, complex data like offline applications.</li> <li>Use Cookies for server-side communication, session tracking, and authentication tokens.</li> </ul>"},{"location":"tech/javascript.html#asynchronous-programming-in-javascript","title":"Asynchronous Programming in JavaScript","text":"<p>JavaScript is single-threaded, meaning it executes one task at a time. To handle long-running operations (e.g., API calls, timers), asynchronous programming is used to avoid blocking the main thread. Here\u2019s a deep dive into the key concepts related to asynchronous programming.</p>"},{"location":"tech/javascript.html#callbacks","title":"Callbacks","text":"<p>A callback is a function passed as an argument to another function, which is then invoked after the completion of an asynchronous operation.</p>"},{"location":"tech/javascript.html#how-it-works","title":"How It Works:","text":"<ul> <li>A callback function is executed only when the task it is associated with is completed.</li> <li>Commonly used in APIs, event handling, or asynchronous tasks like reading files or fetching data.</li> </ul>"},{"location":"tech/javascript.html#real-life-example_4","title":"Real-Life Example:","text":"<p>Imagine you order food online. The callback is like a notification sent to you when the delivery is complete.</p>"},{"location":"tech/javascript.html#code-example","title":"Code Example:","text":"<pre><code>function fetchData(callback) {\n  console.log(\"Fetching data...\");\n  setTimeout(() =&gt; {\n    console.log(\"Data fetched!\");\n    callback(\"Here's your data!\");\n  }, 2000);\n}\n\nfunction handleData(data) {\n  console.log(data);\n}\n\n// Using a callback\nfetchData(handleData);</code></pre>"},{"location":"tech/javascript.html#memoization","title":"Memoization","text":"<p>Memoization is an optimization technique where the result of a function call is cached so that future calls with the same inputs can return the cached result, avoiding redundant computations.</p>"},{"location":"tech/javascript.html#key-features","title":"Key Features:","text":"<ul> <li>Improves performance for expensive calculations.</li> <li>Commonly used in recursive algorithms like Fibonacci.</li> </ul>"},{"location":"tech/javascript.html#real-life-example_5","title":"Real-Life Example:","text":"<p>You look up a phone number once and save it in your contacts. Next time, instead of looking it up again, you retrieve it from your contacts.</p>"},{"location":"tech/javascript.html#code-example_1","title":"Code Example:","text":"<pre><code>function memoizedFactorial() {\n  const cache = {};\n  return function factorial(n) {\n    if (n in cache) return cache[n];\n    if (n === 0 || n === 1) return 1;\n    cache[n] = n * factorial(n - 1);\n    return cache[n];\n  };\n}\n\nconst factorial = memoizedFactorial();\nconsole.log(factorial(5)); // Calculates and caches\nconsole.log(factorial(5)); // Returns cached result</code></pre>"},{"location":"tech/javascript.html#promises_1","title":"Promises","text":"<p>A Promise represents a value that will be resolved in the future. It is used to handle asynchronous operations more effectively, avoiding callback nesting (callback hell).</p>"},{"location":"tech/javascript.html#states-of-a-promise","title":"States of a Promise:","text":"<ol> <li>Pending: Initial state, operation not yet completed.</li> <li>Resolved: Operation completed successfully.</li> <li>Rejected: Operation failed.</li> </ol>"},{"location":"tech/javascript.html#real-life-example_6","title":"Real-Life Example:","text":"<p>Ordering a package online:</p> <ul> <li>Pending: Order is placed.</li> <li>Resolved: Package is delivered.</li> <li>Rejected: Package is lost.</li> </ul>"},{"location":"tech/javascript.html#code-example_2","title":"Code Example:","text":"<pre><code>const fetchData = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    const success = true; // Simulate success/failure\n    success\n      ? resolve(\"Data fetched successfully!\")\n      : reject(\"Error fetching data.\");\n  }, 2000);\n});\n\nfetchData\n  .then((data) =&gt; console.log(data)) // Handles success\n  .catch((error) =&gt; console.error(error)); // Handles failure</code></pre>"},{"location":"tech/javascript.html#arrow-functions-vs-normal-functions","title":"Arrow Functions vs Normal Functions","text":"<p>Arrow functions (<code>=&gt;</code>) provide a concise way to define functions and do not bind their own <code>this</code>. They are suited for simple callbacks but lack features like <code>arguments</code>.</p>"},{"location":"tech/javascript.html#key-differences","title":"Key Differences:","text":"<ol> <li>Syntax: Arrow functions have a shorter syntax.</li> <li><code>this</code> Binding: Arrow functions inherit <code>this</code> from the surrounding context; normal functions have their own <code>this</code>.</li> <li>Arguments: Arrow functions do not have an <code>arguments</code> object.</li> </ol>"},{"location":"tech/javascript.html#real-life-example_7","title":"Real-Life Example:","text":"<p>Using an arrow function for concise callbacks:</p> <pre><code>// Arrow Function\nconst add = (a, b) =&gt; a + b;\nconsole.log(add(2, 3)); // 5\n\n// Normal Function\nfunction multiply(a, b) {\n  return a * b;\n}\nconsole.log(multiply(2, 3)); // 6</code></pre>"},{"location":"tech/javascript.html#generator-functions","title":"Generator Functions","text":"<p>Generator functions allow you to pause and resume function execution using the <code>yield</code> keyword.</p>"},{"location":"tech/javascript.html#how-it-works_1","title":"How It Works:","text":"<ul> <li>Defined using <code>function*</code>.</li> <li>Return an iterator object.</li> <li>Useful for producing values on demand (lazy evaluation).</li> </ul>"},{"location":"tech/javascript.html#real-life-example_8","title":"Real-Life Example:","text":"<p>Distributing tasks to workers, one at a time.</p>"},{"location":"tech/javascript.html#code-example_3","title":"Code Example:","text":"<pre><code>function* generateNumbers() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst iterator = generateNumbers();\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }</code></pre>"},{"location":"tech/javascript.html#temporal-dead-zone-tdz","title":"Temporal Dead Zone (TDZ)","text":"<p>The Temporal Dead Zone refers to the time between entering the scope of a variable declared with <code>let</code> or <code>const</code> and its declaration. Accessing the variable in this period throws a <code>ReferenceError</code>.</p>"},{"location":"tech/javascript.html#real-life-example_9","title":"Real-Life Example:","text":"<p>You try to open a shop before it officially opens.</p>"},{"location":"tech/javascript.html#code-example_4","title":"Code Example:","text":"<pre><code>console.log(a); // ReferenceError: Cannot access 'a' before initialization\nlet a = 10;</code></pre>"},{"location":"tech/javascript.html#callback-hell_1","title":"Callback Hell","text":"<p>Callback Hell occurs when multiple nested callbacks make code difficult to read and maintain.</p>"},{"location":"tech/javascript.html#real-life-example_10","title":"Real-Life Example:","text":"<p>Imagine giving instructions through a chain of middlemen, each depending on the previous one.</p>"},{"location":"tech/javascript.html#code-example-callback-hell","title":"Code Example (Callback Hell):","text":"<pre><code>function firstTask(callback) {\n  setTimeout(() =&gt; {\n    console.log(\"First task done.\");\n    callback();\n  }, 1000);\n}\n\nfunction secondTask(callback) {\n  setTimeout(() =&gt; {\n    console.log(\"Second task done.\");\n    callback();\n  }, 1000);\n}\n\nfirstTask(() =&gt; {\n  secondTask(() =&gt; {\n    console.log(\"All tasks done.\");\n  });\n});</code></pre>"},{"location":"tech/javascript.html#best-practices-for-asynchronous-programming","title":"Best Practices for Asynchronous Programming","text":"<ol> <li>Use Promises or async/await to avoid callback hell.</li> <li>Use Memoization to optimize expensive computations.</li> <li>Use Generator Functions for on-demand data processing.</li> <li>Understand this in arrow functions to avoid bugs.</li> </ol>"},{"location":"tech/javascript.html#scope-and-environment-in-javascript","title":"Scope and Environment in JavaScript","text":"<p>JavaScript's scope defines where a variable or function is accessible in the code. The environment refers to the surrounding context or state in which the code executes.</p>"},{"location":"tech/javascript.html#lexical-scoping","title":"Lexical Scoping","text":"<p>Lexical scoping means that a variable's scope is determined by its position in the code at the time of writing, not at runtime. Inner functions can access variables from their outer functions, forming a scope chain.</p>"},{"location":"tech/javascript.html#key-points","title":"Key Points:","text":"<ul> <li>Functions can access variables declared in their outer scope.</li> <li>The scope chain determines the hierarchy of variable access.</li> </ul>"},{"location":"tech/javascript.html#real-life-example_11","title":"Real-Life Example:","text":"<p>Imagine a house with rooms. Each room has its own items (local variables), but you can access items in the house's living room (outer scope).</p>"},{"location":"tech/javascript.html#code-example_5","title":"Code Example:","text":"<pre><code>function outer() {\n  const outerVar = \"I am from outer scope\";\n\n  function inner() {\n    console.log(outerVar); // Accesses variable from the outer scope\n  }\n\n  inner();\n}\n\nouter();</code></pre>"},{"location":"tech/javascript.html#dom-and-bom","title":"DOM and BOM","text":""},{"location":"tech/javascript.html#dom-document-object-model","title":"DOM (Document Object Model)","text":"<p>The DOM represents the structure of an HTML document as a tree, where elements are nodes. Using the DOM, you can interact with and manipulate HTML and CSS programmatically.</p>"},{"location":"tech/javascript.html#key-points_1","title":"Key Points:","text":"<ul> <li>Access and modify HTML elements (<code>document.getElementById</code>, <code>querySelector</code>, etc.).</li> <li>Add, delete, or update elements dynamically.</li> <li>Change styles and attributes.</li> </ul>"},{"location":"tech/javascript.html#real-life-example_12","title":"Real-Life Example:","text":"<p>When you click a button on a webpage, the DOM handles what happens to the button (e.g., changing its color or text).</p>"},{"location":"tech/javascript.html#code-example_6","title":"Code Example:","text":"<pre><code>// Changing the text of an element with ID 'myButton'\ndocument.getElementById(\"myButton\").innerText = \"Clicked!\";</code></pre>"},{"location":"tech/javascript.html#bom-browser-object-model","title":"BOM (Browser Object Model)","text":"<p>The BOM represents everything provided by the browser outside the DOM, including browser-specific objects like <code>window</code>, <code>navigator</code>, and <code>history</code>.</p>"},{"location":"tech/javascript.html#key-features_1","title":"Key Features:","text":"<ul> <li>Control browser actions (e.g., open new tabs with <code>window.open()</code>).</li> <li>Access browser details (e.g., <code>navigator.userAgent</code> for the browser name).</li> <li>Interact with browser history (<code>history.back()</code>, <code>history.forward()</code>).</li> </ul>"},{"location":"tech/javascript.html#real-life-example_13","title":"Real-Life Example:","text":"<p>When you navigate back to a previous page using the browser's \"back\" button, you interact with the BOM.</p>"},{"location":"tech/javascript.html#code-example_7","title":"Code Example:","text":"<pre><code>// Alerting the browser's user agent\nconsole.log(window.navigator.userAgent);</code></pre>"},{"location":"tech/javascript.html#data-types-and-operations","title":"Data Types and Operations","text":""},{"location":"tech/javascript.html#javascript-data-types","title":"JavaScript Data Types","text":"<p>JavaScript has two categories of data types:</p> <ol> <li> <p>Primitive Types:</p> </li> <li> <p>String (<code>\"Hello\"</code>)</p> </li> <li>Number (<code>42</code>)</li> <li>Boolean (<code>true</code> or <code>false</code>)</li> <li>Null (<code>null</code>)</li> <li>Undefined (<code>undefined</code>)</li> <li>Symbol (<code>Symbol('id')</code>)</li> <li> <p>BigInt (<code>123n</code>)</p> </li> <li> <p>Non-Primitive (Objects):</p> </li> <li>Objects</li> <li>Arrays</li> <li>Functions</li> </ol>"},{"location":"tech/javascript.html#real-life-example_14","title":"Real-Life Example:","text":"<p>Think of data types as different containers:</p> <ul> <li>Numbers are like calculators.</li> <li>Strings are like diaries that hold text.</li> <li>Arrays are like baskets holding multiple items.</li> </ul>"},{"location":"tech/javascript.html#code-example_8","title":"Code Example:","text":"<pre><code>const name = \"Kaushal\"; // String\nconst age = 25; // Number\nconst isStudent = true; // Boolean\nconst skills = [\"React\", \"Node.js\"]; // Array</code></pre>"},{"location":"tech/javascript.html#spread-operator_1","title":"Spread Operator","text":"<p>The spread operator (<code>...</code>) allows you to expand or copy elements of arrays, objects, or strings into new ones.</p>"},{"location":"tech/javascript.html#key-uses","title":"Key Uses:","text":"<ol> <li>Combine or clone arrays and objects.</li> <li>Pass array elements as arguments to functions.</li> </ol>"},{"location":"tech/javascript.html#real-life-example_15","title":"Real-Life Example:","text":"<p>Imagine unpacking a box of chocolates and spreading them on a tray. Each piece is now separate and easy to access.</p>"},{"location":"tech/javascript.html#code-example-1-cloning-and-merging-arrays","title":"Code Example 1: Cloning and Merging Arrays","text":"<pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5]; // [1, 2, 3, 4, 5]\nconsole.log(arr2);</code></pre>"},{"location":"tech/javascript.html#code-example-2-cloning-an-object","title":"Code Example 2: Cloning an Object","text":"<pre><code>const person = { name: \"Kaushal\", age: 25 };\nconst clonedPerson = { ...person, city: \"Delhi\" };\nconsole.log(clonedPerson); // { name: 'Kaushal', age: 25, city: 'Delhi' }</code></pre>"},{"location":"tech/javascript.html#key-differences-dom-vs-bom","title":"Key Differences: DOM vs BOM","text":"Feature DOM BOM Definition Represents HTML document structure. Represents browser-specific objects. Focus Handles web page content. Handles browser environment. Examples <code>document.querySelector</code>, <code>innerHTML</code>. <code>window.open</code>, <code>navigator</code>."},{"location":"tech/playwright.html","title":"Playwright","text":"<ul> <li>Title: Playwright Documentation</li> <li>Description: Documentation on Playwright learning and setup for testing.</li> <li>Owner: Kaushal Raj</li> <li>Authors: Kaushal Raj</li> <li>Categories: Testing</li> <li>Tags: Playwright, Testing, Automation</li> </ul>"},{"location":"tech/playwright.html#playwright-documentation","title":"Playwright Documentation","text":""},{"location":"tech/playwright.html#1-introduction","title":"1. Introduction","text":"<p>Playwright is a powerful testing tool for end-to-end testing across web applications, supporting multiple browsers and platforms. This guide provides examples and best practices for locating elements, interacting with the UI, and running tests.</p>"},{"location":"tech/playwright.html#2-locators-and-selectors","title":"2. Locators and Selectors","text":"<p>Playwright offers flexible locators to identify and interact with elements in a browser.</p>"},{"location":"tech/playwright.html#element-interactions","title":"Element Interactions","text":""},{"location":"tech/playwright.html#1-navigation-and-clicks","title":"1. Navigation and Clicks","text":"<ul> <li>Navigate to URL: <code>page.goto(\"http://localhost:3000/\")</code></li> <li>Click Element: <pre><code>page.click(\"locator\");\npage.click(\"id=loginId\"); // example</code></pre></li> </ul>"},{"location":"tech/playwright.html#2-filling-inputs","title":"2. Filling Inputs","text":"<ul> <li>Fill Input:</li> </ul> <pre><code>page.fill(\"locator\", \"value\");\npage.fill(\"input=[id='loginId']\", \"value\"); // example</code></pre> <ul> <li>Type in Input: <pre><code>page.type(\"locator\", \"value\");</code></pre></li> </ul>"},{"location":"tech/playwright.html#locator-variants","title":"Locator Variants","text":"<p>Playwright\u2019s <code>locator</code> API provides enhanced flexibility and precision:</p> <ul> <li>Links/Buttons:</li> </ul> <pre><code>page.click(\"locator\");\npage.locator(\"locator\").click();</code></pre> <ul> <li>Input Boxes: <pre><code>page.locator(\"locator\").fill(\"value\");\npage.locator(\"locator\").type(\"value\");</code></pre></li> </ul>"},{"location":"tech/playwright.html#3-built-in-locators","title":"3. Built-in Locators","text":"<p>Playwright has built-in locators that simplify accessibility and semantic element selection:</p> <ul> <li><code>page.getByRole()</code>: Locate by role attribute.</li> <li><code>page.getByText()</code>: Locate by text content.</li> <li><code>page.getByLabel()</code>: Locate by associated label\u2019s text.</li> <li><code>page.getByPlaceholder()</code>: Locate by placeholder attribute.</li> <li><code>page.getByAltText()</code>: Locate by alt attribute.</li> <li><code>page.getByTitle()</code>: Locate by title attribute.</li> <li><code>page.getByTestId()</code>: Locate by <code>data-testid</code> attribute.</li> </ul> <p>Tip: Use Selector Hub extension to extract precise element selectors.</p>"},{"location":"tech/playwright.html#4-running-tests","title":"4. Running Tests","text":""},{"location":"tech/playwright.html#run-commands","title":"Run Commands","text":"<ul> <li>Run a Specific File: <pre><code>npx playwright test file-path/filename --project chromium --headed</code></pre></li> </ul> <p>You can adjust the project to specify other browsers or environments.</p>"},{"location":"tech/playwright.html#5-additional-notes","title":"5. Additional Notes","text":"<ul> <li>Playwright Inspector: Use this tool to debug tests by visually inspecting elements.</li> <li>Handling Multiple Roles and Flows: Design your tests with reusable functions and page object models for consistency.</li> </ul> <p>npx playwright codegen -o .\\tests\\Admin\\non-event.spec.ts - command to execute the code generator   - npx playwright codegen - to create a file and record the test cases.   - npx playwright codegen -o filePath/filename -</p>"},{"location":"tech/post_deploy.html","title":"Post deploy","text":"<ul> <li>Title: Playwright Documentation</li> <li>Description: Documentation on Playwright learning and setup for testing.</li> <li>Owner: Kaushal Raj</li> <li>Authors: Kaushal Raj</li> <li>Categories: Testing</li> <li>Tags: Playwright, Testing, Automation</li> </ul>"},{"location":"tech/post_deploy.html#analytics","title":"Analytics","text":""},{"location":"tech/post_deploy.html#how-analytics-works","title":"How Analytics Works","text":"<ol> <li>Collcection - Google Tag Manager</li> <li>Store - Google Analytics</li> <li>Report - Looker Studio</li> </ol>"},{"location":"tech/post_deploy.html#google-tag-manager","title":"Google Tag Manager","text":""},{"location":"tech/post_deploy.html#hierarchy","title":"Hierarchy","text":"<ul> <li> <p>GTA is also called shell</p> </li> <li> <p>Account</p> </li> <li>Container<ul> <li>WorkSpace</li> </ul> </li> </ul>"},{"location":"tech/post_deploy.html#parts-of-gtm","title":"Parts Of GTM","text":"<ol> <li>Tags - What GTM will do</li> <li>Trigger - When GTM will do</li> <li>Variables - What GTM needs to do</li> <li> <p>Folder - Where GTM is organized</p> </li> <li> <p>What does GTM Collects</p> </li> <li> <p>View</p> </li> <li>Clicks</li> <li>Scroll</li> <li>Interaction</li> </ol>"},{"location":"tech/reactjs.html","title":"React.js","text":""},{"location":"tech/reactjs.html#what-is-reactjs","title":"What is React.js?","text":"<p>React.js ek JavaScript library hai jo ki UI (User Interface) banane ke liye use hoti hai. Ye Facebook ne banayi thi aur iska main kaam single-page applications (SPA) banana hai jisme page reload ki zaroorat nahi padti. React component-based architecture par kaam karta hai.</p> <p>Real-life example: Ek mobile app socho jaise Zomato. Agar tum search karte ho aur naye restaurants dikhte hain bina page reload kiye, to yeh React.js ki wajah se possible hota hai.</p>"},{"location":"tech/reactjs.html#when-was-react-created","title":"When was React created?","text":"<p>React.js ko Facebook ne 2013 me open-source kiya tha. Iska main purpose complex UI ko easily handle karna tha.</p> <p>Real-life example: Tum Facebook ka \"Like\" button socho, jo bina pura page reload kiye update hota hai.</p>"},{"location":"tech/reactjs.html#framework-vs-library","title":"Framework vs Library","text":"<ul> <li>Framework: Ek complete solution jo coding structure aur rules provide karta hai. Example: Angular.</li> <li>Library: Specific task ke liye functions provide karta hai, jisme zyada flexibility hoti hai. Example: React.js.</li> </ul> <p>Real-life example: Framework ek ready-made thali jaise hota hai, jisme sab kuch defined hota hai, aur library ek aise buffet jaise hoti hai jisme jo chahiye le sakte ho.</p>"},{"location":"tech/reactjs.html#npx-vs-npm","title":"NPX vs NPM","text":"<ul> <li>NPM (Node Package Manager): Ye ek package manager hai jo dependencies ko install aur manage karta hai.</li> <li>NPX: Ye ek npm package runner hai jo bina install kiye packages ko run karne me madad karta hai.</li> </ul> <p>Real-life example: NPM ek kirane ki dukaan jaise hai jisme saman store hota hai, aur NPX ek aise messenger jaise hai jo saman lekar aata hai bina store kiye.</p>"},{"location":"tech/reactjs.html#npm","title":"NPM","text":"<p>NPM (Node Package Manager) ek tool hai jo Node.js ke saath aata hai aur open-source packages ko manage karne ke liye use hota hai.</p> <p>Real-life example: Jaise tum Flipkart se alag-alag brands ka saman order kar sakte ho, waise hi NPM alag-alag dependencies install karta hai.</p>"},{"location":"tech/reactjs.html#react-vs-react-dom","title":"React vs React-DOM","text":"<ul> <li>React: Ye core library hai jo components banane aur logic handle karne ke kaam aati hai.</li> <li>React-DOM: Ye React components ko web page ke HTML DOM me render karne ke liye use hoti hai.</li> </ul> <p>Real-life example: React ek actor jaise hai jo apni performance deta hai, aur React-DOM stage hai jahan wo perform karta hai.</p>"},{"location":"tech/reactjs.html#reactcreateelement-and-what-does-it-return","title":"React.createElement and what does it return?","text":"<p>React.createElement ek method hai jo React elements banane ke liye use hoti hai. Ye ek JavaScript object return karta hai jo virtual DOM ka part banta hai.</p> <p>Real-life example: Jaise tum ek online shopping cart me items add karte ho aur wo list virtual hoti hai, waise hi React.createElement virtual DOM me elements add karta hai.</p>"},{"location":"tech/reactjs.html#create-root","title":"Create Root","text":"<p>React 18 se pehle ReactDOM.render() use hota tha, ab \"createRoot\" function use hota hai jo asynchronous rendering allow karta hai.</p> <p>Example:</p> <pre><code>import { createRoot } from \"react-dom/client\";\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(&lt;App /&gt;);</code></pre>"},{"location":"tech/reactjs.html#can-we-create-two-roots-in-one-app","title":"Can we create two roots in one app?","text":"<p>Haan, hum ek application me do alag-alag roots bana sakte hain, lekin ye recommended nahi hai kyunki state management aur performance issues aa sakte hain.</p> <p>Real-life example: Jaise ek ghar me do kitchens banana possible hai, lekin maintenance mushkil ho sakti hai.</p>"},{"location":"tech/reactjs.html#createelement-parameters","title":"createElement Parameters","text":"<p>React.createElement ke 3 main parameters hote hain:</p> <ol> <li>Type: Element ka type (div, h1, p)</li> <li>Props: Element ke attributes</li> <li>Children: Jo content dikhana hai</li> </ol> <p>Example:</p> <pre><code>React.createElement(\"h1\", { className: \"title\" }, \"Hello World\");</code></pre>"},{"location":"tech/reactjs.html#emmet","title":"Emmet","text":"<p>Emmet ek plugin hai jo HTML, CSS aur JSX likhne ko fast aur easy banata hai by using shortcuts.</p> <p>Example: Typing <code>div.container</code> gives <code>&lt;div class=\"container\"&gt;&lt;/div&gt;</code></p> <p>Real-life example: Jaise WhatsApp me shortcodes use karne par emojis aa jate hain, waise hi Emmet se code shortcuts milti hain.</p>"},{"location":"tech/reactjs.html#cdn","title":"CDN","text":"<p>CDN (Content Delivery Network) ek server network hai jo files ko jaldi load karne ke liye use hota hai.</p> <p>Real-life example: Jaise Netflix apne content ko duniya bhar me servers pe rakhta hai taaki har jagah fast chale, waise hi CDN website assets fast deliver karne me madad karta hai.</p>"},{"location":"tech/reactjs.html#async","title":"Async","text":"<p>Async ek keyword hai jo functions ko asynchronous banata hai, iska matlab ye hai ki ye promise return karega aur synchronous code ko block nahi karega.</p> <p>Real-life example: Jaise tum Swiggy pe order karte ho aur dusre kaam bhi karte ho jab tak food deliver ho, waise hi async code background me chalta rehta hai.</p>"},{"location":"tech/reactjs.html#defer","title":"Defer","text":"<p>Defer ek attribute hai jo HTML script tag me diya jata hai. Ye script ko tab tak execute nahi hone deta jab tak pura HTML load na ho jaye.</p> <p>Real-life example: Jaise pehle ghar ka furniture set ho jaye uske baad accessories laaye jaye, waise hi defer scripts ke execution ko delay karta hai.</p>"},{"location":"tech/reactjs.html#bundler","title":"Bundler","text":"<p>Bundler ek tool hai jo multiple files (JS, CSS, images) ko ek hi file me combine karke optimize karta hai.</p> <p>Real-life example: Jaise ek school ki kit me sare items ek hi bag me pack hote hain, waise hi bundler sab kuch combine kar deta hai.</p>"},{"location":"tech/reactjs.html#npm-and-why-we-need-it","title":"NPM and Why We Need It","text":"<p>NPM (Node Package Manager) ek package manager hai jo Node.js applications ke liye third-party libraries provide karta hai. Hume ye isliye chahiye taaki hum baar-baar same code na likhna pade aur efficient development ho sake.</p> <p>Real-life example: Jaise ek carpenter ready-made tools use karta hai taaki furniture jaldi ban sake, waise hi NPM se ready-made packages ka use hota hai.</p>"},{"location":"tech/reactjs.html#while-install-d","title":"While Install -d","text":"<p>\"-d\" flag ka use dependencies ko \"devDependencies\" section me install karne ke liye hota hai jo sirf development ke time chahiye hote hain.</p> <p>Example:</p> <pre><code>npm install eslint -D</code></pre>"},{"location":"tech/reactjs.html#version-control-in-packagejson","title":"Version Control in package.json","text":"<p>Package.json file version control ke liye semantic versioning (major.minor.patch) ka use karta hai. Isse dependencies ke updates manage hote hain.</p> <p>Example:</p> <pre><code>\"react\": \"^18.2.0\"</code></pre>"},{"location":"tech/reactjs.html#packagejson-vs-package-lockjson","title":"package.json vs package-lock.json","text":"<ul> <li>package.json: Dependencies ki list aur project ki information store karta hai.</li> <li>package-lock.json: Exact version aur dependency tree store karta hai taaki same environment har system me mile.</li> </ul> <p>Real-life example: Package.json ek shopping list hai aur package-lock.json bill jisme exact items ki details hoti hain.</p>"},{"location":"tech/reactjs.html#hot-module-reloading","title":"Hot Module Reloading","text":"<p>Hot Module Reloading (HMR) ka matlab hai bina page reload ki code changes ko reflect karna, jo development speed ko badhata hai.</p> <p>Real-life example: Jaise gaming me ek new level aane ke liye pura game restart nahi hota, waise hi HMR page ko reload kiye bina changes apply karta hai.</p>"},{"location":"tech/reactjs.html#file-watcher-algorithm","title":"File Watcher Algorithm","text":"<p>Ye algorithm system ke file changes ko detect karta hai aur changes hone par code ko automatically recompile karta hai.</p> <p>Real-life example: Jaise security camera continuous monitoring karta hai aur movement detect karta hai.</p>"},{"location":"tech/reactjs.html#webpack","title":"Webpack","text":"<p>Webpack ek popular bundler hai jo JavaScript modules ko optimize aur bundle karta hai. Isme loaders aur plugins ka use hota hai.</p> <p>Real-life example: Jaise ek factory me raw materials ko process karke ek finished product banaya jata hai.</p>"},{"location":"tech/reactjs.html#use-of-parcel","title":"Use of Parcel","text":"<p>Parcel ek zero-config bundler hai jo fast bundling provide karta hai aur automatic code splitting karta hai.</p> <p>Real-life example: Jaise instant noodles banane ke liye kisi extra preparation ki zaroorat nahi hoti.</p>"},{"location":"tech/reactjs.html#transitive-dependency","title":"Transitive Dependency","text":"<p>Transitive dependency wo dependencies hoti hain jo kisi aur package ke through aati hain, yani indirectly install hoti hain.</p> <p>Real-life example: Jaise agar tum ek mobile buy karte ho aur charger free me milta hai jo mobile ka dependency hai.</p>"},{"location":"tech/reactjs.html#tree-shaking","title":"Tree Shaking","text":"<p>Tree shaking ek technique hai jo unused code ko remove karke bundle size ko kam karta hai.</p> <p>Real-life example: Jaise ek mobile app me unused features disable karke space save kiya jata hai.</p>"},{"location":"tech/reactjs.html#different-types-of-bundlers","title":"Different Types of Bundlers","text":"<ol> <li>Webpack \u2013 Popular aur highly customizable.</li> <li>Parcel \u2013 Zero-config aur fast.</li> <li>Rollup \u2013 Library ke liye best.</li> <li>Esbuild \u2013 Fastest bundler.</li> </ol> <p>Real-life example: Jaise alag-alag tiffin services different types of food provide karti hain, waise hi bundlers alag needs ke liye best hote hain.</p>"},{"location":"tech/reactjs.html#type-of-symbol-used-in-packagejson","title":"Type of Symbol Used in package.json","text":"<p>In <code>package.json</code>, several symbols help manage dependencies and their versions:</p> <ul> <li><code>^</code>: Allows updates to minor and patch versions, but not major versions.</li> <li>Example: <code>\"react\": \"^17.0.2\"</code> allows versions <code>&gt;=17.0.2 &lt;18.0.0</code>.</li> <li> <p><code>~</code>: Allows updates only to patch versions.</p> </li> <li> <p>Example: <code>\"react\": \"~17.0.2\"</code> allows versions <code>&gt;=17.0.2 &lt;17.1.0</code>.</p> </li> <li> <p><code>*</code>: Accepts any version.</p> </li> <li>Example: <code>\"react\": \"*\"</code> allows any version of React.</li> </ul> <p>Real-life example: In a React project, you might use <code>\"^17.0.2\"</code> for React to ensure you're using a stable, minor release.</p>"},{"location":"tech/reactjs.html#polyfill","title":"Polyfill","text":"<p>A polyfill is code that adds functionality for features not supported by older browsers. It \"fills\" the gap for missing features like <code>Promise</code>, <code>fetch()</code>, or <code>Array.from()</code>.</p> <p>Example: If your app uses the <code>fetch()</code> API to make HTTP requests, but you want to support older browsers, you can use a polyfill like <code>whatwg-fetch</code>.</p> <p>Real-life example: If you're building a modern app, and some users are still using Internet Explorer, you might use <code>core-js</code> to provide polyfills for missing ES6/ES7 features, ensuring compatibility.</p>"},{"location":"tech/reactjs.html#browserlist","title":"BrowserList","text":"<p><code>browserslist</code> is a tool that allows you to specify which browsers you want to support in your project. This configuration is used by Babel and Autoprefixer to determine what transformations or prefixes should be applied to your code.</p> <p>Example in <code>package.json</code>:</p> <pre><code>\"browserslist\": \"&gt; 1%, last 2 versions, not dead\"</code></pre> <p>Real-life example: For a business app, you may need to target the latest browsers for a better user experience, but also support older browsers like Chrome 60 and Firefox 60 for legacy users.</p>"},{"location":"tech/reactjs.html#keys-in-react-with-example","title":"Keys in React with Example","text":"<p>In React, the <code>key</code> attribute is used to uniquely identify elements in a list, allowing React to optimize updates.</p> <p>Example:</p> <pre><code>const items = [\"Apple\", \"Banana\", \"Orange\"];\nfunction List() {\n  return (\n    &lt;ul&gt;\n      {items.map((item, index) =&gt; (\n        &lt;li key={index}&gt;{item}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}</code></pre> <p>Real-life example: In a shopping cart, you could use the product's ID as the key to ensure React efficiently handles changes when products are added or removed.</p>"},{"location":"tech/reactjs.html#jsx-vs-js","title":"JSX vs JS","text":"<ul> <li>JSX: It is a syntax extension that allows you to write HTML-like code inside JavaScript. JSX makes it easier to describe the UI structure in React.</li> </ul> <p>Example:</p> <pre><code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</code></pre> <ul> <li>JS: Standard JavaScript that manipulates the DOM. JSX is compiled into JS by Babel before it runs in the browser.</li> </ul> <p>Real-life example: In an e-commerce site, JSX allows you to write UI components that describe how products, prices, and images are displayed.</p>"},{"location":"tech/reactjs.html#transitive-dependency_1","title":"Transitive Dependency","text":"<p>Transitive dependencies are dependencies of dependencies in a project. If Package A depends on Package B, and Package B depends on Package C, Package C is a transitive dependency.</p> <p>Real-life example: If you're using a React component library (Package A) that internally depends on a date library (Package B), the date library is a transitive dependency for your project, even though you didn't directly install it.</p>"},{"location":"tech/reactjs.html#functional-components","title":"Functional Components","text":"<p>Functional components are simpler, stateless components in React that are defined using JavaScript functions. They are primarily used for rendering UI.</p> <p>Example:</p> <pre><code>const Greeting = (props) =&gt; {\n  return &lt;h1&gt;Hello, {props.name}!&lt;/h1&gt;;\n};</code></pre> <p>Real-life example: In a mobile app, a <code>UserProfile</code> component could be a functional component that displays a user\u2019s name, age, and profile picture.</p>"},{"location":"tech/reactjs.html#react-element-vs-react-component-with-example","title":"React Element vs React Component with Example","text":"<ul> <li>React Element: A plain JavaScript object representing a DOM node. It's the smallest unit of React that React uses to describe what to render.</li> </ul> <p>Example:</p> <pre><code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</code></pre> <ul> <li>React Component: A function or class that returns React elements. Components can manage state and lifecycle methods.</li> </ul> <p>Example:</p> <pre><code>class MyComponent extends React.Component {\n  render() {\n    return &lt;h1&gt;Hello from a class component!&lt;/h1&gt;;\n  }\n}</code></pre> <p>Real-life example: A <code>Button</code> component can return a React element like <code>&lt;button&gt;Click Me&lt;/button&gt;</code>, which gets rendered as a clickable button in the UI.</p>"},{"location":"tech/reactjs.html#jsx-in-terms-of-security","title":"JSX in Terms of Security","text":"<p>JSX prevents XSS attacks by automatically escaping values in curly braces. This ensures that any JavaScript or HTML code injected into the JSX won't be executed.</p> <p>Example:</p> <pre><code>const userInput = \"&lt;script&gt;alert('Hacked!')&lt;/script&gt;\";\nconst element = &lt;div&gt;{userInput}&lt;/div&gt;;</code></pre> <ul> <li>React escapes the <code>script</code> tag, rendering it safely as text rather than executing it.</li> </ul> <p>Real-life example: If you're building a blog, React ensures that user comments or any dynamic content cannot inject harmful JavaScript.</p>"},{"location":"tech/reactjs.html#component-composition-and-nested-components","title":"Component Composition and Nested Components","text":"<p>Component composition refers to combining smaller components to build more complex ones. Components can be nested inside each other.</p> <p>Example:</p> <pre><code>const Header = () =&gt; (\n  &lt;header&gt;\n    &lt;h1&gt;Welcome to My Website&lt;/h1&gt;\n  &lt;/header&gt;\n);\nconst Footer = () =&gt; (\n  &lt;footer&gt;\n    &lt;p&gt;\u00a9 2025 My Website&lt;/p&gt;\n  &lt;/footer&gt;\n);\n\nconst Page = () =&gt; (\n  &lt;div&gt;\n    &lt;Header /&gt;\n    &lt;main&gt;\n      &lt;p&gt;This is the content area.&lt;/p&gt;\n    &lt;/main&gt;\n    &lt;Footer /&gt;\n  &lt;/div&gt;\n);</code></pre> <p>Real-life example: A <code>Dashboard</code> page in a web app can be composed of a <code>Sidebar</code>, <code>Header</code>, and <code>MainContent</code> components, each responsible for their own section.</p>"},{"location":"tech/reactjs.html#react-fragments","title":"React Fragments","text":"<p>React Fragments allow you to group multiple elements without adding extra nodes to the DOM. They help maintain cleaner DOM structures.</p> <p>Example:</p> <pre><code>const List = () =&gt; (\n  &lt;&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n  &lt;/&gt;\n);</code></pre> <p>Real-life example: In a form, you may use fragments to group multiple form fields without introducing unnecessary wrapper elements.</p>"},{"location":"tech/reactjs.html#config-driven-ui","title":"Config-Driven UI","text":"<p>A config-driven UI refers to designing a UI based on configuration files that specify the layout, elements, and behavior. This makes it easy to change the UI without modifying the core logic.</p> <p>Real-life example: In a content management system (CMS), the admin can modify a configuration file to change how widgets are arranged on the page, without needing to edit the codebase.</p>"},{"location":"tech/reactjs.html#virtual-dom-vs-actual-dom","title":"Virtual DOM vs Actual DOM","text":"<ul> <li>Virtual DOM: A lightweight in-memory representation of the actual DOM. React uses the Virtual DOM to improve performance by minimizing direct manipulations of the real DOM.</li> <li>Actual DOM: The actual representation of the page that the browser renders.</li> </ul> <p>Real-life example: In a dynamic to-do list app, React first updates the Virtual DOM when you add a new task, compares it to the old version, and only applies the changes to the Actual DOM, reducing the number of updates to the page.</p>"},{"location":"tech/reactjs.html#process-of-re-rendering","title":"Process of Re-rendering","text":"<p>The re-rendering process in React includes several stages:</p> <ol> <li>Virtual DOM Creation: React creates a virtual representation of the UI.</li> <li>Render: React calls the <code>render()</code> function to generate a new virtual DOM.</li> <li>Diffing: React compares the new virtual DOM with the previous one to determine changes.</li> <li>Reconciliation: React updates the actual DOM only where changes have been made.</li> <li>Update DOM: React applies the updates to the real DOM.</li> </ol> <p>Real-life example: If you're editing a note in a note-taking app, React will only update the specific part of the page that shows your note's text, rather than reloading the entire page.</p>"},{"location":"tech/reactjs.html#react-fiber","title":"React Fiber","text":"<p>React Fiber is a complete rewrite of React's core algorithm that allows for asynchronous rendering. It helps to optimize the rendering process by breaking down tasks into smaller units of work.</p> <p>Real-life example: React Fiber ensures that UI updates in an e-commerce site remain smooth, even when there are many changes or animations.</p>"},{"location":"tech/reactjs.html#advantages-of-react-fiber","title":"Advantages of React Fiber","text":"<ul> <li>Improved Performance: By breaking rendering tasks into smaller units, React Fiber reduces the time spent on any single update.</li> <li>Concurrency: It allows React to pause and resume rendering, improving user experience during complex updates.</li> </ul> <p>Real-life example: In a game app, React Fiber helps keep the UI responsive even when complex animations are running in the background.</p>"},{"location":"tech/reactjs.html#import-and-export-and-its-types","title":"Import and Export and Its Types","text":"<p>In ES6, <code>import</code> and <code>export</code> are used to modularize JavaScript code.</p> <ul> <li>Named Exports: You can export multiple items from a module.</li> </ul> <pre><code>export const name = \"John\";\nexport function greet() {\n  return \"Hello\";\n}</code></pre> <ul> <li>Default Export: You can export a single item from a module as the default export.   <pre><code>export default function greet() {\n  return \"Hello\";\n}</code></pre></li> </ul> <p>Real-life example: In a React project, you can have one file exporting a default <code>Button</code> component and another file exporting helper functions like <code>calculatePrice</code>.</p> <p>Sure! Let's dive into the details of React Hooks, covering <code>useState</code>, <code>useEffect</code>, <code>useMemo</code>, <code>useCallback</code>, and their usage, including nuances like handling previous state and differences among them.</p>"},{"location":"tech/reactjs.html#hooks-in-react-usestate-useeffect-and-more","title":"Hooks in React (useState, useEffect, and More)","text":"<p>React Hooks are functions that allow you to use state and other React features without writing a class. They provide a more functional approach to managing state, side effects, and optimizations in functional components.</p>"},{"location":"tech/reactjs.html#usestate-hook","title":"useState Hook","text":"<p><code>useState</code> is a hook that allows you to add state variables to functional components. It returns an array with two elements: the current state value and a function to update it.</p> <p>Basic Usage:</p> <pre><code>const [count, setCount] = useState(0);</code></pre> <ul> <li><code>count</code>: The current value of the state.</li> <li><code>setCount</code>: A function that updates the state.</li> </ul> <p>Real-life Example: In a counter application, <code>useState</code> is used to store the count value, and the <code>setCount</code> function updates it when a button is clicked.</p>"},{"location":"tech/reactjs.html#handling-previous-state-in-usestate","title":"Handling Previous State in <code>useState</code>","text":"<p>React batches updates and sometimes needs the previous state value to compute the new state. You can pass a function to <code>setState</code> to access the previous state.</p> <p>Example:</p> <pre><code>setCount((prevCount) =&gt; prevCount + 1);</code></pre> <ul> <li><code>prevCount</code> refers to the value of the state before the update. This is particularly useful when you need to update state based on the current state.</li> </ul> <p>Real-life Example: In a to-do list app, when a user adds a new task, you may want to append the new task to the list based on the previous tasks in the state.</p>"},{"location":"tech/reactjs.html#useeffect-hook","title":"useEffect Hook","text":"<p><code>useEffect</code> is a hook that allows you to perform side effects in your functional components. Side effects include tasks like fetching data, subscribing to events, or manually changing the DOM.</p> <p>Basic Usage:</p> <pre><code>useEffect(() =&gt; {\n  console.log(\"Component Mounted\");\n}, []); // Empty array ensures this runs only once, after the component mounts</code></pre> <ul> <li>The first argument is the effect function.</li> <li>The second argument is a dependency array. If any value in the array changes, the effect will run again.</li> </ul> <p>Real-life Example: In a weather app, <code>useEffect</code> can be used to fetch the weather data when the component mounts:</p> <pre><code>useEffect(() =&gt; {\n  fetchWeatherData();\n}, []);</code></pre>"},{"location":"tech/reactjs.html#running-effects-on-specific-dependencies","title":"Running Effects on Specific Dependencies","text":"<p>You can run an effect only when certain dependencies change.</p> <p>Example:</p> <pre><code>useEffect(() =&gt; {\n  fetchUserData(userId);\n}, [userId]);</code></pre> <ul> <li>This will re-fetch user data whenever <code>userId</code> changes.</li> </ul> <p>Real-life Example: In a messaging app, you may want to refresh the message list only when the conversation changes.</p>"},{"location":"tech/reactjs.html#cleaning-up-effects","title":"Cleaning Up Effects","text":"<p>Some effects need cleanup, such as removing event listeners or canceling API calls. You can return a cleanup function inside <code>useEffect</code>.</p> <p>Example:</p> <pre><code>useEffect(() =&gt; {\n  const timer = setInterval(() =&gt; console.log(\"Tick\"), 1000);\n\n  return () =&gt; clearInterval(timer); // Cleanup on unmount\n}, []);</code></pre> <ul> <li>The cleanup function runs when the component unmounts or when the dependencies change.</li> </ul> <p>Real-life Example: In a chat application, if you subscribe to a WebSocket connection, you can clean it up when the component unmounts.</p>"},{"location":"tech/reactjs.html#usememo-hook","title":"useMemo Hook","text":"<p><code>useMemo</code> is a hook that memoizes the result of an expensive calculation so that it doesn't re-run on every render unless necessary. It's useful for optimizing performance when a computation is expensive.</p> <p>Basic Usage:</p> <pre><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</code></pre> <ul> <li>The function <code>computeExpensiveValue(a, b)</code> will only be re-executed when <code>a</code> or <code>b</code> change.</li> </ul> <p>Real-life Example: In a shopping cart app, if you're calculating the total price based on many items, <code>useMemo</code> can prevent recalculating the total unless the items or quantities change.</p>"},{"location":"tech/reactjs.html#usecallback-hook","title":"useCallback Hook","text":"<p><code>useCallback</code> is similar to <code>useMemo</code>, but instead of memoizing the result of a function, it memoizes the function itself. It ensures the function reference doesn't change unless the dependencies change.</p> <p>Basic Usage:</p> <pre><code>const memoizedCallback = useCallback(() =&gt; {\n  console.log(\"Callback function\");\n}, [dependencies]);</code></pre> <p>Real-life Example: If you're passing a function as a prop to a child component, <code>useCallback</code> can help prevent unnecessary re-renders by ensuring the function reference remains stable.</p>"},{"location":"tech/reactjs.html#differences-between-usememo-and-usecallback","title":"Differences Between <code>useMemo</code> and <code>useCallback</code>","text":"<p>While both <code>useMemo</code> and <code>useCallback</code> optimize performance by memoizing values, their use cases are different:</p> <ul> <li><code>useMemo</code>: Memoizes the result of a computation.</li> <li>Example: Memoizing the computed value of a list.</li> <li><code>useCallback</code>: Memoizes the function itself.</li> <li>Example: Memoizing a function that updates the state of a parent component.</li> </ul>"},{"location":"tech/reactjs.html#real-life-example","title":"Real-life Example:","text":"<ol> <li> <p><code>useMemo</code>: If you have a function that filters a list of items based on a search query, <code>useMemo</code> will ensure that the list is re-filtered only when the search query or the list of items changes, improving performance.</p> </li> <li> <p><code>useCallback</code>: If you're passing an event handler to a child component and the child re-renders frequently, using <code>useCallback</code> ensures the function doesn't get recreated on every render, which can help optimize performance.</p> </li> </ol>"},{"location":"tech/reactjs.html#microservices","title":"Microservices","text":"<p>Microservices is an architectural style where an application is built as a collection of loosely coupled, independently deployable services. Each service in the system is focused on a specific business function and can be developed, deployed, and scaled independently.</p> <p>Example: Imagine an online e-commerce platform:</p> <ul> <li>One microservice might handle user authentication.</li> <li>Another might handle product management.</li> <li>Another could be responsible for processing orders.</li> </ul> <p>Each service runs independently and communicates via APIs.</p> <p>Real-life Example: An e-commerce platform like Amazon may have separate services for managing products, user reviews, payments, and order processing, all interacting with each other but operating independently.</p>"},{"location":"tech/reactjs.html#monolithic","title":"Monolithic","text":"<p>Monolithic architecture refers to a traditional model where the entire application is built as a single, tightly integrated unit. It includes both the frontend and backend, which are combined in a single codebase.</p> <p>Example: In a monolithic application, a user management system, order processing, and inventory management might all be part of one large application. Any change in the system requires rebuilding and redeploying the entire application.</p> <p>Real-life Example: Traditional web applications, like early versions of Facebook, operated on a monolithic architecture where all the features were in a single codebase.</p>"},{"location":"tech/reactjs.html#cors-cross-origin-resource-sharing","title":"CORS (Cross-Origin Resource Sharing)","text":"<p>CORS is a security feature implemented by browsers to prevent websites from making requests to a different domain than the one that served the web page. It allows servers to control which domains are permitted to access their resources.</p> <p>Example: If a frontend application hosted on <code>www.example.com</code> tries to fetch data from <code>api.anotherdomain.com</code>, the server at <code>api.anotherdomain.com</code> must explicitly allow this request by including specific CORS headers like:</p> <pre><code>Access-Control-Allow-Origin: https://www.example.com</code></pre> <p>Real-life Example: In a scenario where your React frontend is hosted on one domain and your backend is hosted on another, you would need to configure CORS on your server to allow your frontend to access the server\u2019s resources.</p>"},{"location":"tech/reactjs.html#js-expression","title":"JS Expression","text":"<p>A JavaScript expression is any valid unit of code that can produce a value. Expressions can be as simple as a variable or more complex like function calls or mathematical operations.</p> <p>Example:</p> <pre><code>let x = 5 + 3; // This is an expression that evaluates to 8.</code></pre> <p>Expressions can also be inside JSX in React:</p> <pre><code>const element = &lt;h1&gt;{5 + 3}&lt;/h1&gt;; // The expression `5 + 3` is evaluated to 8 and rendered.</code></pre> <p>Real-life Example: In a React component, an expression like <code>{user.name}</code> inside JSX will render the <code>name</code> property of the <code>user</code> object.</p>"},{"location":"tech/reactjs.html#js-statement","title":"JS Statement","text":"<p>A JavaScript statement is a piece of code that performs an action. It does not return a value directly like an expression but is used to control program flow or execute an operation.</p> <p>Example:</p> <pre><code>let x = 5; // This is a statement.</code></pre> <p>Real-life Example: In an e-commerce app, a statement like <code>if (cart.isEmpty()) { showEmptyCartMessage(); }</code> checks whether the shopping cart is empty and displays a message accordingly.</p>"},{"location":"tech/reactjs.html#optical-channing","title":"Optical Channing","text":"<p>Optical Channing refers to a design pattern or technique where the visual content of an interface is enhanced to guide the user\u2019s attention towards important information. It\u2019s often used in UI design to ensure elements like buttons or key actions stand out.</p> <p>Example: Using bright colors for call-to-action buttons, or placing key information in larger fonts, can visually guide the user\u2019s focus and improve usability.</p> <p>Real-life Example: In a login form, the \u201cLogin\u201d button may be brightly colored (like blue or green) to draw attention, while the rest of the form elements (like input fields) are in a more muted color, ensuring users are drawn to the action they need to take.</p>"},{"location":"tech/reactjs.html#shimmer-ui","title":"Shimmer UI","text":"<p>Shimmer UI is a technique used to indicate that content is loading. It is a visual placeholder, often shown as a shimmering animation on a skeleton screen (a blank page or outline of the layout).</p> <p>Example: When data is being fetched from an API, instead of showing a blank page, a shimmer effect (like a moving gradient or bars) is displayed to indicate that content is on its way.</p> <p>Real-life Example: Many modern apps, like Instagram or Facebook, use shimmer loading effects when new posts or content are being fetched, providing users with a more pleasant experience than simply showing a loading spinner.</p> <p>Let's break down the key concepts related to React Router DOM, and I\u2019ll also add some additional useful topics that could help you navigate routing in React applications effectively.</p>"},{"location":"tech/reactjs.html#react-router-dom","title":"React Router DOM","text":"<p>React Router DOM is the standard library used for handling routing in React applications. It enables navigation between different views or pages in a single-page application (SPA) without needing to refresh the page.</p> <ul> <li>It helps in mapping URLs to React components and enables users to navigate between different views of the application seamlessly.</li> </ul> <p>Real-life Example: In an online shopping application, React Router allows navigating between the homepage, product details, shopping cart, and checkout pages without a page reload.</p>"},{"location":"tech/reactjs.html#router-provider","title":"Router Provider","text":"<p>The <code>RouterProvider</code> component is used to set up the router in your React app and wrap your app with routing functionality. This is part of React Router v6+.</p> <p>Example:</p> <pre><code>import { RouterProvider } from \"react-router-dom\";\nimport routes from \"./routes\";\n\nfunction App() {\n  return &lt;RouterProvider router={routes} /&gt;;\n}</code></pre> <ul> <li>It takes the router instance and provides it to the app.</li> </ul>"},{"location":"tech/reactjs.html#creating-browser-router","title":"Creating Browser Router","text":"<p><code>BrowserRouter</code> is used to enable routing based on the history API, which uses the browser's address bar to manage routing and refreshes.</p> <p>Example:</p> <pre><code>import { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;YourRoutesHere /&gt;\n    &lt;/Router&gt;\n  );\n}</code></pre> <ul> <li><code>BrowserRouter</code> wraps the app and enables navigation through URLs without a page reload.</li> </ul>"},{"location":"tech/reactjs.html#error-element","title":"Error Element","text":"<p>In React Router v6+, <code>ErrorElement</code> is used to display an error component if a route fails to match or an error occurs in that route.</p> <p>Example:</p> <pre><code>const routes = [\n  {\n    path: \"/\",\n    element: &lt;Home /&gt;,\n  },\n  {\n    path: \"*\",\n    element: &lt;ErrorPage /&gt;,\n  },\n];</code></pre> <ul> <li>The <code>\"*\"</code> path acts as a wildcard for undefined routes and triggers the <code>ErrorPage</code> component when no other route matches.</li> </ul> <p>Real-life Example: When a user navigates to a non-existent page (like <code>/unknown</code>), React Router shows a custom error page.</p>"},{"location":"tech/reactjs.html#link","title":"Link","text":"<p>The <code>Link</code> component is used to create navigation links between pages. It prevents full page reloads and allows smooth navigation within the SPA.</p> <p>Example:</p> <pre><code>import { Link } from \"react-router-dom\";\n\nfunction Navigation() {\n  return (\n    &lt;nav&gt;\n      &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n      &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n    &lt;/nav&gt;\n  );\n}</code></pre> <ul> <li><code>Link</code> is similar to an anchor tag (<code>&lt;a&gt;</code>), but it prevents page reloads and uses React Router\u2019s internal navigation system.</li> </ul> <p>Real-life Example: The \"Sign In\" button on an e-commerce site might link to the login page without a full page reload.</p>"},{"location":"tech/reactjs.html#outlet","title":"Outlet","text":"<p><code>Outlet</code> is a placeholder in a route component that renders nested routes. It helps in building layouts with nested routes, making routing more flexible.</p> <p>Example:</p> <pre><code>import { Outlet } from \"react-router-dom\";\n\nfunction Layout() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Header&lt;/h1&gt;\n      &lt;Outlet /&gt;\n      &lt;h2&gt;Footer&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}</code></pre> <ul> <li>The <code>Outlet</code> renders the matched nested route inside the <code>Layout</code>.</li> </ul> <p>Real-life Example: In a blog, the main layout might have a header and footer, but the body content can change based on the specific blog post selected.</p>"},{"location":"tech/reactjs.html#useparams","title":"useParams","text":"<p><code>useParams</code> is a hook that gives you access to the route parameters. It is useful for dynamic routing where part of the URL is variable (like an ID or slug).</p> <p>Example:</p> <pre><code>import { useParams } from \"react-router-dom\";\n\nfunction Post() {\n  const { postId } = useParams();\n  return &lt;h1&gt;Post {postId}&lt;/h1&gt;;\n}</code></pre> <ul> <li>In the above example, the <code>postId</code> is extracted from the URL, and the component dynamically displays content based on that value.</li> </ul> <p>Real-life Example: A blog post page that dynamically loads the content based on the <code>postId</code> parameter.</p>"},{"location":"tech/reactjs.html#useroutererror","title":"useRouterError","text":"<p><code>useRouterError</code> is a new hook in React Router v6+ that allows you to handle route errors, such as when a route component fails to load or when a route does not exist.</p> <p>Example:</p> <pre><code>import { useRouterError } from \"react-router-dom\";\n\nfunction ErrorPage() {\n  const error = useRouterError();\n  return &lt;div&gt;Error: {error.message}&lt;/div&gt;;\n}</code></pre> <ul> <li>This hook can be used to display a custom error page when something goes wrong while navigating to a route.</li> </ul>"},{"location":"tech/reactjs.html#usehistory-deprecated-in-react-router-v6","title":"useHistory (Deprecated in React Router v6)","text":"<p>In previous versions of React Router (v5), <code>useHistory</code> was used to programmatically navigate to different routes.</p> <p>Example:</p> <pre><code>import { useHistory } from \"react-router-dom\";\n\nfunction NavigateButton() {\n  const history = useHistory();\n\n  const goHome = () =&gt; {\n    history.push(\"/\");\n  };\n\n  return &lt;button onClick={goHome}&gt;Go Home&lt;/button&gt;;\n}</code></pre> <ul> <li><code>useHistory</code> allowed you to trigger navigation programmatically from within a component.</li> </ul> <p>In React Router v6+, <code>useHistory</code> has been replaced with <code>useNavigate</code>.</p>"},{"location":"tech/reactjs.html#uselocation","title":"useLocation","text":"<p><code>useLocation</code> is a hook that gives you access to the current location object, which contains information about the current URL, including pathname, search, and hash.</p> <p>Example:</p> <pre><code>import { useLocation } from \"react-router-dom\";\n\nfunction CurrentLocation() {\n  const location = useLocation();\n  return &lt;div&gt;Current path: {location.pathname}&lt;/div&gt;;\n}</code></pre> <ul> <li><code>useLocation</code> is helpful for rendering the current path or URL in your UI.</li> </ul> <p>Real-life Example: Displaying the current URL in a navigation bar or showing a \"You are here\" breadcrumb.</p>"},{"location":"tech/reactjs.html#additional-important-topics","title":"Additional Important Topics","text":"<ol> <li> <p>useNavigate (Replacement for <code>useHistory</code> in v6):</p> </li> <li> <p>It provides the ability to navigate programmatically.</p> </li> <li> <p>Example: <code>const navigate = useNavigate(); navigate(\"/home\");</code></p> </li> <li> <p>Routes:</p> </li> <li> <p>The <code>Routes</code> component (replacing <code>Switch</code> in v6) is used to define which route to render based on the URL.</p> </li> <li> <p>Example:      <pre><code>&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n  &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n&lt;/Routes&gt;</code></pre></p> </li> <li> <p>Route Path Matching:</p> </li> <li> <p>React Router v6 uses exact matching by default, unlike v5, where you had to explicitly specify <code>exact</code>.</p> </li> <li> <p>Nested Routes:</p> </li> <li>You can define nested routes inside other route components to create layouts with nested views.</li> <li>Example:      <pre><code>&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n    &lt;Route path=\"about\" element={&lt;About /&gt;} /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;</code></pre></li> </ol>"},{"location":"tech/reactjs.html#class-based-components","title":"Class-based Components","text":"<p>Class-based components are the traditional way to define components in React. They extend from <code>React.Component</code> and have access to lifecycle methods, state, and other features.</p> <p>Example:</p> <pre><code>import React, { Component } from \"react\";\n\nclass MyComponent extends Component {\n  render() {\n    return &lt;div&gt;Hello, {this.props.name}&lt;/div&gt;;\n  }\n}</code></pre> <ul> <li><code>class MyComponent</code> defines the component, and <code>render()</code> is the method responsible for returning JSX.</li> </ul>"},{"location":"tech/reactjs.html#render-method","title":"Render Method","text":"<p>The <code>render</code> method is the only required method in a class-based component. It returns the JSX (or React elements) that represent the UI.</p> <p>Example:</p> <pre><code>render() {\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\n}</code></pre> <ul> <li>This method is called automatically when the component's state or props change, causing the component to re-render.</li> </ul>"},{"location":"tech/reactjs.html#constructor","title":"Constructor","text":"<p>The <code>constructor</code> method is called when the component is initialized. It's used to set up state, bind event handlers, or do any setup before the component is rendered.</p> <p>Example:</p> <pre><code>constructor(props) {\n  super(props);\n  this.state = { counter: 0 };\n}</code></pre> <ul> <li>The <code>constructor</code> must call <code>super(props)</code> before using <code>this</code>.</li> </ul>"},{"location":"tech/reactjs.html#super","title":"Super","text":"<p>The <code>super</code> keyword is used to call the parent class's constructor. It is necessary to call <code>super(props)</code> in a class component\u2019s constructor to inherit the properties of <code>React.Component</code>.</p> <p>Example:</p> <pre><code>constructor(props) {\n  super(props); // Calls the constructor of React.Component\n  this.state = { name: 'John' };\n}</code></pre> <ul> <li>Without <code>super(props)</code>, <code>this</code> will be undefined in the constructor.</li> </ul>"},{"location":"tech/reactjs.html#thisstate","title":"this.state","text":"<p><code>this.state</code> is an object where you store values that represent the state of your component. It allows the component to track and respond to changes in data.</p> <p>Example:</p> <pre><code>this.state = { counter: 0 };</code></pre> <ul> <li>In this example, <code>counter</code> is a state variable, and <code>this.state</code> holds the current value.</li> </ul>"},{"location":"tech/reactjs.html#setstate","title":"setState","text":"<p><code>setState</code> is a method that updates the component's state. It triggers a re-render of the component and its children.</p> <p>Example:</p> <pre><code>this.setState({ counter: this.state.counter + 1 });</code></pre> <ul> <li>When <code>setState</code> is called, React schedules a re-render of the component with the new state.</li> </ul>"},{"location":"tech/reactjs.html#lifecycle-methods-in-class-components","title":"Lifecycle Methods in Class Components","text":"<p>React class components have several lifecycle methods that allow you to run code at different stages of the component\u2019s existence.</p>"},{"location":"tech/reactjs.html#mounting-phase-when-the-component-is-created","title":"Mounting Phase (When the component is created)","text":"<ul> <li>constructor(props): Initializes state and binds methods.</li> <li>static getDerivedStateFromProps(props, state): Called before every render. It can return an object to update the state based on props.</li> <li>render(): Returns the JSX to be rendered.</li> <li>componentDidMount(): Called once the component is mounted in the DOM. Ideal for making API calls or setting up subscriptions.</li> </ul>"},{"location":"tech/reactjs.html#updating-phase-when-state-or-props-change","title":"Updating Phase (When state or props change)","text":"<ul> <li>static getDerivedStateFromProps(props, state): Called before every render, even after the component mounts.</li> <li>shouldComponentUpdate(nextProps, nextState): Determines if the component should re-render based on changes in state or props.</li> <li>render(): Re-renders the component with updated state and props.</li> <li>getSnapshotBeforeUpdate(prevProps, prevState): Called right before changes from the virtual DOM are reflected in the real DOM. You can capture some information (like scroll position) before the update.</li> <li>componentDidUpdate(prevProps, prevState, snapshot): Called after the component updates and the changes have been applied to the DOM.</li> </ul>"},{"location":"tech/reactjs.html#unmounting-phase-when-the-component-is-removed-from-the-dom","title":"Unmounting Phase (When the component is removed from the DOM)","text":"<ul> <li>componentWillUnmount(): Called just before the component is unmounted and destroyed. It\u2019s ideal for cleanup like canceling API calls or removing event listeners.</li> </ul>"},{"location":"tech/reactjs.html#error-handling-phase-when-an-error-occurs-in-a-component","title":"Error Handling Phase (When an error occurs in a component)","text":"<ul> <li>static getDerivedStateFromError(error): Updates state when an error is caught during rendering.</li> <li>componentDidCatch(error, info): Handles errors by logging them or showing fallback UI.</li> </ul>"},{"location":"tech/reactjs.html#life-cycle-comparison-with-functional-components","title":"Life Cycle Comparison with Functional Components","text":"<p>Functional components, introduced with React Hooks, do not have lifecycle methods like class components. However, hooks like <code>useEffect</code> replicate lifecycle behavior.</p> Lifecycle Method Class Component Functional Component (with Hooks) Component Mounted <code>componentDidMount()</code> <code>useEffect(() =&gt; {...}, [])</code> Component Updated <code>componentDidUpdate()</code> <code>useEffect(() =&gt; {...}, [dependencies])</code> Component Unmounted <code>componentWillUnmount()</code> <code>useEffect(() =&gt; { return () =&gt; {...} }, [])</code> Error Handling <code>componentDidCatch()</code> <code>ErrorBoundary</code> (HOC or component) <p>In functional components, <code>useEffect</code> handles all the phases of lifecycle management, but you have more control over how and when effects run with different dependency arrays.</p>"},{"location":"tech/reactjs.html#react-render-phases","title":"React Render Phases","text":"<p>React rendering has two main phases:</p> <ol> <li>Render Phase: This is when React calculates what the UI should look like. It involves creating a Virtual DOM and figuring out what has changed.</li> <li>Commit Phase: This is when React applies the changes to the actual DOM and updates the UI.</li> </ol>"},{"location":"tech/reactjs.html#which-phase-is-faster","title":"Which Phase is Faster?","text":"<ul> <li>The Render Phase is faster because React only computes changes in the Virtual DOM and doesn\u2019t make any direct changes to the actual DOM yet.</li> <li>The Commit Phase is slower because it involves making actual DOM updates, which are more time-consuming.</li> </ul>"},{"location":"tech/reactjs.html#custom-hooks","title":"Custom Hooks","text":"<p>Custom hooks are JavaScript functions that allow you to extract logic and state management from a component into a reusable function. They help make code more modular and easier to manage, especially when the same logic needs to be used in multiple places across your application.</p> <p>Why Custom Hooks are Needed:</p> <ul> <li>To extract logic from components so that you don't repeat it in every component.</li> <li>They help in maintaining cleaner, more readable, and maintainable code.</li> <li>They allow sharing logic across multiple components without needing to rely on higher-order components (HOCs) or render props.</li> </ul> <p>When Should You Use Custom Hooks:</p> <ul> <li>When you have reusable stateful logic that can be shared between multiple components.</li> <li>When you need to manage complex logic or side effects (like fetching data, timers, etc.) in a clean way.</li> <li>When a piece of state or functionality needs to be shared between components, creating a custom hook will encapsulate the logic neatly.</li> </ul> <p>Example of a Custom Hook:</p> <pre><code>import { useState, useEffect } from \"react\";\n\nfunction useCounter(initialValue) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () =&gt; setCount(count + 1);\n  const decrement = () =&gt; setCount(count - 1);\n\n  return { count, increment, decrement };\n}\n\nexport default useCounter;</code></pre> <ul> <li>The <code>useCounter</code> custom hook can now be used across multiple components without repeating the logic.</li> </ul>"},{"location":"tech/reactjs.html#lazy-loading","title":"Lazy Loading","text":"<p>Lazy loading is a technique in React where components or assets (like images, JavaScript files) are loaded only when they are needed, rather than upfront. This can help in reducing the initial load time of a React application.</p> <p>Why is it Useful?</p> <ul> <li>It improves the performance of the application by splitting the bundle and loading parts of the app only when needed.</li> <li>Helps reduce the amount of JavaScript loaded initially, leading to faster page loads.</li> </ul> <p>Example of Lazy Loading a Component:</p> <pre><code>import React, { Suspense, lazy } from \"react\";\n\nconst MyComponent = lazy(() =&gt; import(\"./MyComponent\"));\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n      &lt;MyComponent /&gt;\n    &lt;/Suspense&gt;\n  );\n}</code></pre> <ul> <li><code>lazy</code> is used to dynamically import the <code>MyComponent</code>, and the <code>Suspense</code> component is used to show a fallback UI (like a loading spinner) while the component is loading.</li> </ul>"},{"location":"tech/reactjs.html#lazy-suspense","title":"Lazy Suspense","text":"<p>Suspense is a React component that works in combination with lazy loading. It allows you to display a loading indicator while React is waiting to load some resources, like a component or data.</p> <p>Why is Lazy Suspense Useful?</p> <ul> <li>It allows developers to manage loading states in React applications in a declarative way.</li> <li>It helps with code-splitting, allowing for loading parts of the application only when necessary.</li> </ul> <p>How Does It Work?</p> <ul> <li><code>lazy</code> is used to load a component lazily, and <code>Suspense</code> is used to manage the fallback UI (like a loading spinner or message) while waiting for the component to load.</li> </ul> <p>Example of Lazy Suspense:</p> <pre><code>import React, { Suspense, lazy } from \"react\";\n\nconst UserProfile = lazy(() =&gt; import(\"./UserProfile\"));\n\nfunction App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n      &lt;UserProfile /&gt;\n    &lt;/Suspense&gt;\n  );\n}</code></pre> <ul> <li>Here, <code>UserProfile</code> will only be loaded when needed, and until it\u2019s loaded, the fallback <code>&lt;div&gt;Loading...&lt;/div&gt;</code> will be displayed.</li> </ul>"},{"location":"tech/reactjs.html#props-drilling","title":"Props Drilling","text":"<p>Props drilling is a term used when you have to pass data or functions through many layers of components, even if intermediate components don't need the data. This can lead to messy and hard-to-maintain code, especially in large applications.</p> <p>Why it\u2019s a Problem:</p> <ul> <li>The code becomes harder to maintain as your component tree grows, and it creates unnecessary dependencies between components.</li> <li>If you need to change or update the props passed through several layers, it can lead to confusion and errors.</li> </ul> <p>Real-life Example of Props Drilling:</p> <ul> <li>Consider a parent component passing data down to a deeply nested child. The data has to be passed through every intermediate level, which is inefficient.</li> </ul>"},{"location":"tech/reactjs.html#lifting-state-up","title":"Lifting State Up","text":"<p>Lifting the state up refers to the practice of moving state from a child component to a common parent component so that multiple children can share and update the same state. It is helpful when you want to synchronize state between sibling components.</p> <p>When to Use Lifting State Up:</p> <ul> <li>When multiple components need access to or need to modify the same piece of state.</li> <li>When you need to synchronize state across different components that are not directly connected.</li> </ul> <p>Example:</p> <pre><code>function ParentComponent() {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (event) =&gt; {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;ChildComponent1 inputValue={inputValue} /&gt;\n      &lt;ChildComponent2 onInputChange={handleInputChange} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction ChildComponent1({ inputValue }) {\n  return &lt;input type=\"text\" value={inputValue} /&gt;;\n}\n\nfunction ChildComponent2({ onInputChange }) {\n  return &lt;input type=\"text\" onChange={onInputChange} /&gt;;\n}</code></pre> <ul> <li>The parent component holds the state (<code>inputValue</code>), and both child components share this state, updating it when necessary.</li> </ul>"},{"location":"tech/reactjs.html#redux","title":"Redux","text":"<p>Redux is a state management library for JavaScript apps, often used with React. It provides a centralized store to manage the state of your application in a predictable way.</p>"},{"location":"tech/reactjs.html#how-redux-works","title":"How Redux Works:","text":"<ol> <li>Store: Redux holds the entire state of your application in a single object, called the store.</li> <li>Actions: Actions are plain JavaScript objects that describe what happened in the app. They typically contain a <code>type</code> property and may also contain data to update the store.</li> <li>Reducers: Reducers are pure functions that specify how the application's state should change in response to an action. They take the current state and the action as arguments and return the new state.</li> <li>Dispatch: To modify the state, actions are dispatched to the store using the <code>dispatch</code> function.</li> <li>Subscribe: Components can subscribe to changes in the store and re-render when the state changes.</li> </ol>"},{"location":"tech/reactjs.html#react-redux","title":"React-Redux","text":"<p>React-Redux is a library that connects Redux with React, providing bindings to make it easier to integrate Redux into React apps. It allows React components to read from the Redux store and dispatch actions to update the store.</p>"},{"location":"tech/reactjs.html#how-react-redux-works","title":"How React-Redux Works:","text":"<ul> <li><code>useSelector</code>: A hook used to access the Redux store's state inside functional components.</li> <li><code>useDispatch</code>: A hook that gives access to the Redux store's <code>dispatch</code> function, allowing components to dispatch actions.</li> <li><code>Provider</code>: The <code>&lt;Provider&gt;</code> component wraps your application and makes the Redux store available to all React components.</li> </ul>"},{"location":"tech/reactjs.html#redux-toolkit","title":"Redux Toolkit","text":"<p>Redux Toolkit is an official, opinionated set of tools that helps simplify Redux setup and reduces boilerplate code. It is the recommended way to use Redux in modern applications.</p>"},{"location":"tech/reactjs.html#why-redux-toolkit","title":"Why Redux Toolkit?","text":"<ul> <li>It simplifies the Redux setup process, making it faster and more efficient.</li> <li>Provides utilities for writing reducers and actions with less code (using <code>createSlice</code> and <code>createAsyncThunk</code>).</li> <li>Includes built-in functionality for immutable updates, middleware, and dev tools.</li> </ul>"},{"location":"tech/reactjs.html#how-redux-toolkit-helps","title":"How Redux Toolkit Helps:","text":"<ul> <li><code>createSlice</code>: A function that automatically generates actions and reducers based on the slice of state.</li> <li><code>configureStore</code>: A simplified way to configure the Redux store with middlewares and enhancers.</li> </ul>"},{"location":"tech/reactjs.html#setting-up-redux-in-a-react-app","title":"Setting Up Redux in a React App","text":""},{"location":"tech/reactjs.html#step-1-install-redux-and-react-redux","title":"Step 1: Install Redux and React-Redux","text":"<pre><code>npm install @reduxjs/toolkit react-redux</code></pre>"},{"location":"tech/reactjs.html#step-2-create-the-redux-store","title":"Step 2: Create the Redux Store","text":"<p>Using Redux Toolkit:</p> <pre><code>// src/store.js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./slices\";\n\nconst store = configureStore({\n  reducer: rootReducer, // Root reducer containing all slices\n});\n\nexport default store;</code></pre>"},{"location":"tech/reactjs.html#step-3-create-a-slice","title":"Step 3: Create a Slice","text":"<p>A slice is a collection of Redux reducer logic and actions for a specific feature or part of the application.</p> <p>Example:</p> <pre><code>// src/slices/todoSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  todos: [],\n};\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    addTodo: (state, action) =&gt; {\n      state.todos.push(action.payload);\n    },\n    removeTodo: (state, action) =&gt; {\n      state.todos = state.todos.filter((todo) =&gt; todo.id !== action.payload);\n    },\n  },\n});\n\nexport const { addTodo, removeTodo } = todoSlice.actions;\nexport default todoSlice.reducer;</code></pre> <p>Here, <code>createSlice</code> automatically generates action creators and reducers for <code>addTodo</code> and <code>removeTodo</code>.</p>"},{"location":"tech/reactjs.html#step-4-combine-reducers-if-multiple-slices","title":"Step 4: Combine Reducers (if multiple slices)","text":"<p>If you have multiple slices, you combine them into one root reducer.</p> <pre><code>// src/slices/index.js\nimport { combineReducers } from \"redux\";\nimport todoReducer from \"./todoSlice\";\n\nconst rootReducer = combineReducers({\n  todos: todoReducer,\n});\n\nexport default rootReducer;</code></pre>"},{"location":"tech/reactjs.html#step-5-provide-the-store-to-react","title":"Step 5: Provide the Store to React","text":"<p>Wrap your React application with the <code>&lt;Provider&gt;</code> component from <code>react-redux</code> to give all components access to the Redux store.</p> <pre><code>// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(\"root\")\n);</code></pre>"},{"location":"tech/reactjs.html#step-6-dispatch-actions-and-use-the-state","title":"Step 6: Dispatch Actions and Use the State","text":"<p>Using <code>useDispatch</code> and <code>useSelector</code>:</p> <ul> <li> <p><code>useDispatch</code>: A hook to get the <code>dispatch</code> function and dispatch actions to the Redux store.</p> </li> <li> <p><code>useSelector</code>: A hook to get the state from the Redux store.</p> </li> </ul> <p>Example Component:</p> <pre><code>// src/components/TodoList.js\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTodo, removeTodo } from \"../slices/todoSlice\";\n\nfunction TodoList() {\n  const [newTodo, setNewTodo] = useState(\"\");\n  const todos = useSelector((state) =&gt; state.todos.todos); // Access the todos from Redux store\n  const dispatch = useDispatch(); // Get the dispatch function\n\n  const handleAddTodo = () =&gt; {\n    if (newTodo.trim()) {\n      dispatch(addTodo({ id: Date.now(), text: newTodo }));\n      setNewTodo(\"\");\n    }\n  };\n\n  const handleRemoveTodo = (id) =&gt; {\n    dispatch(removeTodo(id));\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        value={newTodo}\n        onChange={(e) =&gt; setNewTodo(e.target.value)}\n      /&gt;\n      &lt;button onClick={handleAddTodo}&gt;Add Todo&lt;/button&gt;\n      &lt;ul&gt;\n        {todos.map((todo) =&gt; (\n          &lt;li key={todo.id}&gt;\n            {todo.text}{\" \"}\n            &lt;button onClick={() =&gt; handleRemoveTodo(todo.id)}&gt;Delete&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default TodoList;</code></pre> <ul> <li><code>useSelector</code> is used to select the part of the state (<code>todos</code> in this case).</li> <li><code>useDispatch</code> is used to dispatch actions (<code>addTodo</code> and <code>removeTodo</code>).</li> </ul>"},{"location":"tech/reactjs.html#step-7-subscribing-to-the-store","title":"Step 7: Subscribing to the Store","text":"<p>Normally, you don't need to subscribe manually in React-Redux. <code>useSelector</code> automatically subscribes your component to the Redux store and causes re-renders when the selected part of the state changes.</p> <p>However, you can manually subscribe to the store if needed (e.g., for non-React parts of the app).</p> <p>Example:</p> <pre><code>// Manually subscribing in a non-React part of the app\nstore.subscribe(() =&gt; {\n  console.log(store.getState()); // Logs the updated state\n});</code></pre>"},{"location":"tech/reactjs.html#how-to-use-redux-in-react","title":"How to Use Redux in React","text":"<ol> <li>Set up the store: Use <code>configureStore</code> from Redux Toolkit to set up the Redux store.</li> <li>Create slices: Use <code>createSlice</code> to define reducers and actions for specific parts of your app.</li> <li>Provide the store: Wrap your root component with the <code>Provider</code> to make the store available to all components.</li> <li>Use actions: Dispatch actions with <code>useDispatch</code> to modify the store.</li> <li>Access state: Use <code>useSelector</code> to access the store's state in functional components.</li> <li>React to store changes: Components automatically re-render when the state they are subscribed to changes.</li> </ol>"},{"location":"tech/reactjs.html#limitations-of-react","title":"Limitations of React","text":"<p>While React is a powerful tool, it has some limitations:</p> <ol> <li>Heavy Initial Bundle Size: React apps can become large and slow to load, especially if you include many libraries and dependencies. Optimization tools like code splitting and lazy loading help mitigate this.</li> <li>SEO Issues: React is client-side rendered by default, which can cause issues with SEO (Search Engine Optimization). Server-side rendering (SSR) or static site generation (SSG) can solve this problem, but it's an added complexity.</li> <li>Boilerplate Code: React projects can become cluttered with boilerplate code, especially when dealing with state management or complex components.</li> <li>Complex State Management: As the app grows, state management can become difficult. Tools like Redux, Context API, and others help but introduce additional complexity.</li> <li>Learning Curve: New developers might find React challenging to learn, especially when dealing with advanced topics like hooks, context, and state management.</li> </ol>"},{"location":"tech/reactjs.html#axios-vs-fetch","title":"Axios vs Fetch","text":"<p>Both Axios and Fetch are used for making HTTP requests, but they have some key differences.</p> <ol> <li> <p>Error Handling:</p> </li> <li> <p>Axios automatically throws an error for HTTP statuses that fall outside the 2xx range.</p> </li> <li> <p>Fetch only throws an error for network-related issues. For HTTP error responses (like 404), it resolves the promise, requiring extra handling.</p> </li> <li> <p>Request Configuration:</p> </li> <li> <p>Axios allows for simpler configuration, especially for setting headers and request types.</p> </li> <li> <p>Fetch requires more manual configuration (e.g., setting headers and parsing JSON).</p> </li> <li> <p>Response Parsing:</p> </li> <li> <p>Axios automatically parses JSON data.</p> </li> <li> <p>Fetch requires you to call <code>.json()</code> on the response to parse the body.</p> </li> <li> <p>Browser Support:</p> </li> <li> <p>Axios works in older browsers, whereas Fetch is supported in modern browsers and may require a polyfill for older versions of Internet Explorer.</p> </li> <li> <p>Request Interceptors:</p> </li> <li>Axios has built-in support for request and response interceptors.</li> <li>Fetch does not have interceptors natively, but you can achieve similar functionality by using <code>async/await</code> or custom middleware.</li> </ol>"},{"location":"tech/reactjs.html#stateless-vs-stateful-components","title":"Stateless vs Stateful Components","text":"<ol> <li> <p>Stateless Components (also called Functional Components):</p> </li> <li> <p>No internal state.</p> </li> <li>They rely entirely on props for data and display.</li> <li>These are simpler and easier to test.</li> <li> <p>Example:      <pre><code>function Greeting(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}</code></pre></p> </li> <li> <p>Stateful Components (also called Class Components or Stateful Functional Components):</p> </li> <li> <p>Has internal state.</p> </li> <li>Can manage data that changes over time (using <code>this.state</code> or <code>useState</code> in functional components).</li> <li> <p>Example:</p> <pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button\n          onClick={() =&gt; this.setState({ count: this.state.count + 1 })}\n        &gt;\n          Count: {this.state.count}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code></pre> </li> </ol>"},{"location":"tech/reactjs.html#how-data-flows-from-parent-to-child-and-child-to-parent","title":"How Data Flows from Parent to Child and Child to Parent","text":"<ul> <li> <p>Parent to Child:</p> </li> <li> <p>Data flows from parent to child through props. The parent component passes data to its child components via the child\u2019s props.</p> </li> <li> <p>Example:</p> <pre><code>function Parent() {\n  return &lt;Child name=\"John\" /&gt;;\n}\n\nfunction Child(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}</code></pre> </li> <li> <p>Child to Parent:</p> </li> <li> <p>To send data from child to parent, you can use a callback function passed as a prop from the parent to the child. The child can call this function with the data it wants to send back to the parent.</p> </li> <li> <p>Example:</p> <pre><code>function Parent() {\n  const handleChildData = (data) =&gt; {\n    console.log(data);\n  };\n  return &lt;Child onSendData={handleChildData} /&gt;;\n}\n\nfunction Child(props) {\n  return (\n    &lt;button onClick={() =&gt; props.onSendData(\"Hello Parent!\")}&gt;\n      Send Data\n    &lt;/button&gt;\n  );\n}</code></pre> </li> </ul>"},{"location":"tech/reactjs.html#controlled-vs-uncontrolled-components","title":"Controlled vs Uncontrolled Components","text":"<ul> <li> <p>Controlled Components: The component\u2019s state is controlled by React, typically using <code>useState</code> (or <code>this.setState</code> in class components). The value of the form element is always controlled by the React state.</p> </li> <li> <p>Example:     <pre><code>function ControlledInput() {\n  const [value, setValue] = useState(\"\");\n  return &lt;input value={value} onChange={(e) =&gt; setValue(e.target.value)} /&gt;;\n}</code></pre></p> </li> <li> <p>Uncontrolled Components: The component's state is not controlled by React. Instead, you use refs to access and modify the DOM directly.</p> </li> <li>Example:     <pre><code>function UncontrolledInput() {\n  const inputRef = useRef();\n  const handleSubmit = () =&gt; {\n    alert(inputRef.current.value);\n  };\n  return &lt;input ref={inputRef} /&gt;;\n}</code></pre></li> </ul>"},{"location":"tech/reactjs.html#class-vs-classname","title":"Class vs ClassName","text":"<ul> <li><code>class</code> is used in HTML to define the class of an element.</li> <li><code>className</code> is used in React because <code>class</code> is a reserved keyword in JavaScript. JSX uses <code>className</code> instead of <code>class</code> to avoid naming conflicts.</li> </ul> <p>Example:</p> <pre><code>&lt;div className=\"container\"&gt;Content&lt;/div&gt;</code></pre>"},{"location":"tech/reactjs.html#error-boundaries","title":"Error Boundaries","text":"<p>An Error Boundary is a React component that catches JavaScript errors anywhere in their child component tree, logs those errors, and displays a fallback UI instead of crashing the entire component tree.</p> <ul> <li> <p>How it works:</p> </li> <li> <p>You can create a class component that defines two lifecycle methods: <code>static getDerivedStateFromError()</code> and <code>componentDidCatch()</code>.</p> </li> </ul> <p>Example:</p> <pre><code>class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    return this.props.children;\n  }\n}</code></pre>"},{"location":"tech/reactjs.html#concurrent-mode","title":"Concurrent Mode","text":"<p>Concurrent Mode is an experimental feature in React that helps improve the performance of rendering complex applications by allowing React to interrupt rendering to work on multiple tasks at once.</p> <ul> <li>It helps React keep the app responsive by rendering updates in the background, pausing and resuming as necessary.</li> <li>It\u2019s especially useful for slow network conditions or complex apps that have long render times.</li> </ul>"},{"location":"tech/reactjs.html#ref-forwarding","title":"Ref Forwarding","text":"<p>Ref Forwarding allows a component to forward a ref to a child component. This is useful when you need to access the DOM element of a child component directly from a parent.</p> <ul> <li> <p>How it works:</p> </li> <li> <p>Use <code>React.forwardRef</code> to forward a ref to the child component.</p> </li> </ul> <p>Example:</p> <pre><code>const FancyButton = React.forwardRef((props, ref) =&gt; (\n  &lt;button ref={ref} className=\"fancy-button\"&gt;\n    {props.children}\n  &lt;/button&gt;\n));\n\nconst App = () =&gt; {\n  const buttonRef = useRef();\n  return &lt;FancyButton ref={buttonRef}&gt;Click me!&lt;/FancyButton&gt;;\n};</code></pre>"},{"location":"tech/reactjs.html#pure-component","title":"Pure Component","text":"<p>A Pure Component is a class component that automatically implements <code>shouldComponentUpdate()</code> with a shallow prop and state comparison.</p> <ul> <li>This helps avoid unnecessary re-renders when the component\u2019s props and state haven\u2019t changed.</li> </ul> <p>Example:</p> <pre><code>class MyComponent extends React.PureComponent {\n  render() {\n    return &lt;div&gt;{this.props.name}&lt;/div&gt;;\n  }\n}</code></pre>"},{"location":"tech/reactjs.html#useref","title":"useRef","text":"<p>The <code>useRef</code> hook provides a way to access the DOM or persist a mutable value across renders without causing a re-render.</p> <ul> <li>Use cases:</li> <li>Accessing a DOM element.</li> <li>Storing a mutable value that does not trigger a re-render when changed.</li> </ul> <p>Example:</p> <pre><code>function Timer() {\n  const count = useRef(0);\n\n  useEffect(() =&gt; {\n    const interval = setInterval(() =&gt; {\n      count.current += 1;\n      console.log(count.current);\n    }, 1000);\n    return () =&gt; clearInterval(interval);\n  }, []);\n\n  return &lt;div&gt;Timer&lt;/div&gt;;\n}</code></pre>"},{"location":"tech/reactjs.html#new-features-of-react-19","title":"New Features of React 19","text":"<p>React 19 introduces some exciting features to make building applications even smoother and more efficient. Let\u2019s break down these features in simple language with real-life examples.</p>"},{"location":"tech/reactjs.html#1-automatic-error-recovery","title":"1. Automatic Error Recovery","text":"<p>React 19 improves error boundaries by automatically recovering from errors in certain situations without crashing the entire app.</p> <p>Real-Life Example: Imagine you're using a food delivery app, and the restaurant menu fails to load. Instead of crashing the entire app, React 19 will just show an error message for the menu and keep the rest of the app (like the search bar and cart) working.</p> <pre><code>// No need to add manual error boundaries everywhere; React handles some recoveries automatically.</code></pre>"},{"location":"tech/reactjs.html#2-improved-streaming-with-server-components","title":"2. Improved Streaming with Server Components","text":"<p>React 19 enhances server-side rendering by supporting streaming data directly to the browser. This means users can see parts of the page as soon as they\u2019re ready, rather than waiting for the entire page to load.</p> <p>Real-Life Example: When loading a news website, instead of waiting for all articles to load, you immediately see the header and breaking news while the rest of the page loads in the background.</p> <pre><code>// Example using server components\nexport default function Page() {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      &lt;NewsSection /&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n}</code></pre>"},{"location":"tech/reactjs.html#3-react-cache-improved-data-fetching","title":"3. React Cache (Improved Data Fetching)","text":"<p>React 19 introduces built-in caching for data fetching, making it easier to manage data that doesn\u2019t change frequently.</p> <p>Real-Life Example: If your app displays the weather forecast, React can cache the data for a short time so that when users refresh the app, it doesn\u2019t re-fetch the same weather data unnecessarily.</p> <pre><code>import { use } from \"react\";\n\nfunction Weather() {\n  const weatherData = use(fetchWeatherData());\n  return &lt;div&gt;Current Weather: {weatherData.temp}\u00b0C&lt;/div&gt;;\n}</code></pre>"},{"location":"tech/reactjs.html#4-offscreen-rendering","title":"4. Offscreen Rendering","text":"<p>React 19 introduces Offscreen Rendering, where components can be pre-rendered but kept hidden until needed. This improves app performance and speeds up how quickly content becomes visible.</p> <p>Real-Life Example: A social media app pre-renders your profile page while you're browsing the home feed. When you click \"Profile,\" it instantly shows the pre-rendered page instead of loading from scratch.</p> <pre><code>function App() {\n  return (\n    &lt;div&gt;\n      &lt;Home /&gt;\n      &lt;Profile hidden={true} /&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>"},{"location":"tech/reactjs.html#5-optimized-transitions-for-smooth-ui","title":"5. Optimized Transitions for Smooth UI","text":"<p>React 19 makes UI transitions smoother by giving developers more tools to prioritize user interactions over background updates.</p> <p>Real-Life Example: In a shopping app, while filtering products by price, React ensures the loading spinner doesn't block the user from scrolling or interacting with the page.</p> <pre><code>import { startTransition } from \"react\";\n\nfunction handleFilterChange(newFilter) {\n  startTransition(() =&gt; {\n    setFilter(newFilter); // Background update\n  });\n}</code></pre>"},{"location":"tech/reactjs.html#6-enhanced-support-for-concurrent-rendering","title":"6. Enhanced Support for Concurrent Rendering","text":"<p>React 19 brings further improvements to Concurrent Mode, allowing React to multitask better. This ensures that your app remains responsive, even with complex UI updates.</p> <p>Real-Life Example: In an e-commerce app, users can scroll through products while the app loads their search results in the background without any lag.</p>"},{"location":"tech/reactjs.html#7-developer-experience-improvements","title":"7. Developer Experience Improvements","text":"<p>React 19 includes better error messages, warnings, and developer tools, making it easier to debug and build applications.</p>"},{"location":"tech/reference-links.html","title":"Learning and Reference links","text":"","tags":["Reference Links"]},{"location":"tech/reference-links.html#study-references","title":"Study References","text":"","tags":["Reference Links"]},{"location":"tech/reference-links.html#core-topics","title":"Core Topics","text":"<ol> <li>Lecture 01 - DB History</li> <li>Lecture 02 - Introduction to Big Data</li> <li>Lecture 03 - Technologies for Big Data</li> <li>Lecture 05 - MapReduce</li> <li>Lecture 06 - Spark</li> </ol>","tags":["Reference Links"]},{"location":"tech/reference-links.html#database-models-and-types","title":"Database Models and Types","text":"<ol> <li>Lecture 07 - Column-Family Stores</li> <li>MongoDB Architecture Guide</li> <li>Lecture 08 - Key-Value Stores</li> <li>Lecture 09 - Column-Oriented Stores</li> <li>Lecture 10 - Document Stores</li> <li>Lecture 11 - Graph Databases</li> <li>Lecture 12 - Multi-Model Databases</li> <li>Lecture 13 - Other Database Types</li> <li>Lecture 14 - Polystores</li> <li>Lecture 15 - Advanced Database Topics</li> </ol>","tags":["Reference Links"]},{"location":"tech/reference-links.html#additional-resources-on-column-oriented-databases","title":"Additional Resources on Column-Oriented Databases","text":"<ol> <li>Column-Oriented Database Systems - VLDB 2009 Tutorial</li> <li>Advanced Database Systems for Big Data</li> </ol>","tags":["Reference Links"]},{"location":"tech/reference-links.html#additional-course-resources","title":"Additional Course Resources","text":"<ol> <li>Svoboda Course Lectures (2015-1)</li> <li>Svoboda Course Lectures (171)</li> <li>Svoboda Course Lectures (191)</li> </ol>","tags":["Reference Links"]}]}